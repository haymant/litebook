/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var rpc_base_pb = require('./rpc_base_pb.js');
var rpc_trade_types_pb = require('./rpc_trade_types_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.AuctionType', null, global);
goog.exportSymbol('proto.ContentAndCapability', null, global);
goog.exportSymbol('proto.DepthOfBookEvent', null, global);
goog.exportSymbol('proto.DividendEvent', null, global);
goog.exportSymbol('proto.DividendFrequency', null, global);
goog.exportSymbol('proto.DividendStatus', null, global);
goog.exportSymbol('proto.DividendType', null, global);
goog.exportSymbol('proto.Event', null, global);
goog.exportSymbol('proto.EventHolder', null, global);
goog.exportSymbol('proto.EventTimestamps', null, global);
goog.exportSymbol('proto.EventType', null, global);
goog.exportSymbol('proto.ExpirationType', null, global);
goog.exportSymbol('proto.FeedStatus', null, global);
goog.exportSymbol('proto.ImbalanceEvent', null, global);
goog.exportSymbol('proto.ImbalanceType', null, global);
goog.exportSymbol('proto.InstrumentStatus', null, global);
goog.exportSymbol('proto.LogEvent', null, global);
goog.exportSymbol('proto.LogEventLevel', null, global);
goog.exportSymbol('proto.MarketDataEvent', null, global);
goog.exportSymbol('proto.MarketStatus', null, global);
goog.exportSymbol('proto.MarketstatEvent', null, global);
goog.exportSymbol('proto.OptionAttributes', null, global);
goog.exportSymbol('proto.QuoteAction', null, global);
goog.exportSymbol('proto.QuoteEvent', null, global);
goog.exportSymbol('proto.TopOfBookEvent', null, global);
goog.exportSymbol('proto.TradeEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventHolder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventHolder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EventHolder.displayName = 'proto.EventHolder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventHolder.prototype.toObject = function(opt_includeInstance) {
  return proto.EventHolder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventHolder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventHolder.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradeevent: (f = msg.getTradeevent()) && proto.TradeEvent.toObject(includeInstance, f),
    quoteevent: (f = msg.getQuoteevent()) && proto.QuoteEvent.toObject(includeInstance, f),
    dividendevent: (f = msg.getDividendevent()) && proto.DividendEvent.toObject(includeInstance, f),
    logevent: (f = msg.getLogevent()) && proto.LogEvent.toObject(includeInstance, f),
    imbalanceevent: (f = msg.getImbalanceevent()) && proto.ImbalanceEvent.toObject(includeInstance, f),
    marketstatevent: (f = msg.getMarketstatevent()) && proto.MarketstatEvent.toObject(includeInstance, f),
    depthofbookevent: (f = msg.getDepthofbookevent()) && proto.DepthOfBookEvent.toObject(includeInstance, f),
    topofbookevent: (f = msg.getTopofbookevent()) && proto.TopOfBookEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventHolder}
 */
proto.EventHolder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventHolder;
  return proto.EventHolder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventHolder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventHolder}
 */
proto.EventHolder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TradeEvent;
      reader.readMessage(value,proto.TradeEvent.deserializeBinaryFromReader);
      msg.setTradeevent(value);
      break;
    case 2:
      var value = new proto.QuoteEvent;
      reader.readMessage(value,proto.QuoteEvent.deserializeBinaryFromReader);
      msg.setQuoteevent(value);
      break;
    case 3:
      var value = new proto.DividendEvent;
      reader.readMessage(value,proto.DividendEvent.deserializeBinaryFromReader);
      msg.setDividendevent(value);
      break;
    case 4:
      var value = new proto.LogEvent;
      reader.readMessage(value,proto.LogEvent.deserializeBinaryFromReader);
      msg.setLogevent(value);
      break;
    case 5:
      var value = new proto.ImbalanceEvent;
      reader.readMessage(value,proto.ImbalanceEvent.deserializeBinaryFromReader);
      msg.setImbalanceevent(value);
      break;
    case 6:
      var value = new proto.MarketstatEvent;
      reader.readMessage(value,proto.MarketstatEvent.deserializeBinaryFromReader);
      msg.setMarketstatevent(value);
      break;
    case 7:
      var value = new proto.DepthOfBookEvent;
      reader.readMessage(value,proto.DepthOfBookEvent.deserializeBinaryFromReader);
      msg.setDepthofbookevent(value);
      break;
    case 8:
      var value = new proto.TopOfBookEvent;
      reader.readMessage(value,proto.TopOfBookEvent.deserializeBinaryFromReader);
      msg.setTopofbookevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventHolder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EventHolder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventHolder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventHolder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradeevent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TradeEvent.serializeBinaryToWriter
    );
  }
  f = message.getQuoteevent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.QuoteEvent.serializeBinaryToWriter
    );
  }
  f = message.getDividendevent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.DividendEvent.serializeBinaryToWriter
    );
  }
  f = message.getLogevent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.LogEvent.serializeBinaryToWriter
    );
  }
  f = message.getImbalanceevent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ImbalanceEvent.serializeBinaryToWriter
    );
  }
  f = message.getMarketstatevent();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.MarketstatEvent.serializeBinaryToWriter
    );
  }
  f = message.getDepthofbookevent();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.DepthOfBookEvent.serializeBinaryToWriter
    );
  }
  f = message.getTopofbookevent();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.TopOfBookEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional TradeEvent tradeEvent = 1;
 * @return {?proto.TradeEvent}
 */
proto.EventHolder.prototype.getTradeevent = function() {
  return /** @type{?proto.TradeEvent} */ (
    jspb.Message.getWrapperField(this, proto.TradeEvent, 1));
};


/** @param {?proto.TradeEvent|undefined} value */
proto.EventHolder.prototype.setTradeevent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.EventHolder.prototype.clearTradeevent = function() {
  this.setTradeevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventHolder.prototype.hasTradeevent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional QuoteEvent quoteEvent = 2;
 * @return {?proto.QuoteEvent}
 */
proto.EventHolder.prototype.getQuoteevent = function() {
  return /** @type{?proto.QuoteEvent} */ (
    jspb.Message.getWrapperField(this, proto.QuoteEvent, 2));
};


/** @param {?proto.QuoteEvent|undefined} value */
proto.EventHolder.prototype.setQuoteevent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.EventHolder.prototype.clearQuoteevent = function() {
  this.setQuoteevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventHolder.prototype.hasQuoteevent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DividendEvent dividendEvent = 3;
 * @return {?proto.DividendEvent}
 */
proto.EventHolder.prototype.getDividendevent = function() {
  return /** @type{?proto.DividendEvent} */ (
    jspb.Message.getWrapperField(this, proto.DividendEvent, 3));
};


/** @param {?proto.DividendEvent|undefined} value */
proto.EventHolder.prototype.setDividendevent = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.EventHolder.prototype.clearDividendevent = function() {
  this.setDividendevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventHolder.prototype.hasDividendevent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LogEvent logEvent = 4;
 * @return {?proto.LogEvent}
 */
proto.EventHolder.prototype.getLogevent = function() {
  return /** @type{?proto.LogEvent} */ (
    jspb.Message.getWrapperField(this, proto.LogEvent, 4));
};


/** @param {?proto.LogEvent|undefined} value */
proto.EventHolder.prototype.setLogevent = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.EventHolder.prototype.clearLogevent = function() {
  this.setLogevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventHolder.prototype.hasLogevent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ImbalanceEvent imbalanceEvent = 5;
 * @return {?proto.ImbalanceEvent}
 */
proto.EventHolder.prototype.getImbalanceevent = function() {
  return /** @type{?proto.ImbalanceEvent} */ (
    jspb.Message.getWrapperField(this, proto.ImbalanceEvent, 5));
};


/** @param {?proto.ImbalanceEvent|undefined} value */
proto.EventHolder.prototype.setImbalanceevent = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.EventHolder.prototype.clearImbalanceevent = function() {
  this.setImbalanceevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventHolder.prototype.hasImbalanceevent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MarketstatEvent marketstatEvent = 6;
 * @return {?proto.MarketstatEvent}
 */
proto.EventHolder.prototype.getMarketstatevent = function() {
  return /** @type{?proto.MarketstatEvent} */ (
    jspb.Message.getWrapperField(this, proto.MarketstatEvent, 6));
};


/** @param {?proto.MarketstatEvent|undefined} value */
proto.EventHolder.prototype.setMarketstatevent = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.EventHolder.prototype.clearMarketstatevent = function() {
  this.setMarketstatevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventHolder.prototype.hasMarketstatevent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DepthOfBookEvent depthOfBookEvent = 7;
 * @return {?proto.DepthOfBookEvent}
 */
proto.EventHolder.prototype.getDepthofbookevent = function() {
  return /** @type{?proto.DepthOfBookEvent} */ (
    jspb.Message.getWrapperField(this, proto.DepthOfBookEvent, 7));
};


/** @param {?proto.DepthOfBookEvent|undefined} value */
proto.EventHolder.prototype.setDepthofbookevent = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.EventHolder.prototype.clearDepthofbookevent = function() {
  this.setDepthofbookevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventHolder.prototype.hasDepthofbookevent = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional TopOfBookEvent topOfBookEvent = 8;
 * @return {?proto.TopOfBookEvent}
 */
proto.EventHolder.prototype.getTopofbookevent = function() {
  return /** @type{?proto.TopOfBookEvent} */ (
    jspb.Message.getWrapperField(this, proto.TopOfBookEvent, 8));
};


/** @param {?proto.TopOfBookEvent|undefined} value */
proto.EventHolder.prototype.setTopofbookevent = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.EventHolder.prototype.clearTopofbookevent = function() {
  this.setTopofbookevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EventHolder.prototype.hasTopofbookevent = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Event.displayName = 'proto.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    source: jspb.Message.getFieldWithDefault(msg, 3, ""),
    provider: jspb.Message.getFieldWithDefault(msg, 4, ""),
    requestid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Event}
 */
proto.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Event;
  return proto.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Event}
 */
proto.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRequestid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int64 messageId = 1;
 * @return {number}
 */
proto.Event.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Event.prototype.setMessageid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Event.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.Event.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Event.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string source = 3;
 * @return {string}
 */
proto.Event.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Event.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string provider = 4;
 * @return {string}
 */
proto.Event.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Event.prototype.setProvider = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 requestId = 5;
 * @return {number}
 */
proto.Event.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Event.prototype.setRequestid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MarketstatEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MarketstatEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MarketstatEvent.displayName = 'proto.MarketstatEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MarketstatEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.MarketstatEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MarketstatEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MarketstatEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.Event.toObject(includeInstance, f),
    eventtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    instrument: (f = msg.getInstrument()) && rpc_trade_types_pb.Instrument.toObject(includeInstance, f),
    open: (f = msg.getOpen()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    high: (f = msg.getHigh()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    low: (f = msg.getLow()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    close: (f = msg.getClose()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    previousclose: (f = msg.getPreviousclose()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    volume: (f = msg.getVolume()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    value: (f = msg.getValue()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    closedate: jspb.Message.getFieldWithDefault(msg, 11, ""),
    previousclosedate: jspb.Message.getFieldWithDefault(msg, 12, ""),
    tradehightime: jspb.Message.getFieldWithDefault(msg, 13, ""),
    tradelowtime: jspb.Message.getFieldWithDefault(msg, 14, ""),
    openexchange: jspb.Message.getFieldWithDefault(msg, 15, ""),
    highexchange: jspb.Message.getFieldWithDefault(msg, 16, ""),
    lowexchange: jspb.Message.getFieldWithDefault(msg, 17, ""),
    closeexchange: jspb.Message.getFieldWithDefault(msg, 18, ""),
    optionattributes: (f = msg.getOptionattributes()) && proto.OptionAttributes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MarketstatEvent}
 */
proto.MarketstatEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MarketstatEvent;
  return proto.MarketstatEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MarketstatEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MarketstatEvent}
 */
proto.MarketstatEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 2:
      var value = /** @type {!proto.EventType} */ (reader.readEnum());
      msg.setEventtype(value);
      break;
    case 3:
      var value = new rpc_trade_types_pb.Instrument;
      reader.readMessage(value,rpc_trade_types_pb.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 4:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setOpen(value);
      break;
    case 5:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setHigh(value);
      break;
    case 6:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setLow(value);
      break;
    case 7:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setClose(value);
      break;
    case 8:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setPreviousclose(value);
      break;
    case 9:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setVolume(value);
      break;
    case 10:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setClosedate(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousclosedate(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradehightime(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradelowtime(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenexchange(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setHighexchange(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setLowexchange(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setCloseexchange(value);
      break;
    case 19:
      var value = new proto.OptionAttributes;
      reader.readMessage(value,proto.OptionAttributes.deserializeBinaryFromReader);
      msg.setOptionattributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MarketstatEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MarketstatEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MarketstatEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MarketstatEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
  f = message.getEventtype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      rpc_trade_types_pb.Instrument.serializeBinaryToWriter
    );
  }
  f = message.getOpen();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getHigh();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getLow();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getClose();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getPreviousclose();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getVolume();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getClosedate();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPreviousclosedate();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTradehightime();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getTradelowtime();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getOpenexchange();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getHighexchange();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getLowexchange();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getCloseexchange();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getOptionattributes();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.OptionAttributes.serializeBinaryToWriter
    );
  }
};


/**
 * optional Event event = 1;
 * @return {?proto.Event}
 */
proto.MarketstatEvent.prototype.getEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 1));
};


/** @param {?proto.Event|undefined} value */
proto.MarketstatEvent.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MarketstatEvent.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketstatEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventType eventType = 2;
 * @return {!proto.EventType}
 */
proto.MarketstatEvent.prototype.getEventtype = function() {
  return /** @type {!proto.EventType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.EventType} value */
proto.MarketstatEvent.prototype.setEventtype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Instrument instrument = 3;
 * @return {?proto.Instrument}
 */
proto.MarketstatEvent.prototype.getInstrument = function() {
  return /** @type{?proto.Instrument} */ (
    jspb.Message.getWrapperField(this, rpc_trade_types_pb.Instrument, 3));
};


/** @param {?proto.Instrument|undefined} value */
proto.MarketstatEvent.prototype.setInstrument = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.MarketstatEvent.prototype.clearInstrument = function() {
  this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketstatEvent.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Qty open = 4;
 * @return {?proto.Qty}
 */
proto.MarketstatEvent.prototype.getOpen = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 4));
};


/** @param {?proto.Qty|undefined} value */
proto.MarketstatEvent.prototype.setOpen = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.MarketstatEvent.prototype.clearOpen = function() {
  this.setOpen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketstatEvent.prototype.hasOpen = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Qty high = 5;
 * @return {?proto.Qty}
 */
proto.MarketstatEvent.prototype.getHigh = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 5));
};


/** @param {?proto.Qty|undefined} value */
proto.MarketstatEvent.prototype.setHigh = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.MarketstatEvent.prototype.clearHigh = function() {
  this.setHigh(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketstatEvent.prototype.hasHigh = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Qty low = 6;
 * @return {?proto.Qty}
 */
proto.MarketstatEvent.prototype.getLow = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 6));
};


/** @param {?proto.Qty|undefined} value */
proto.MarketstatEvent.prototype.setLow = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.MarketstatEvent.prototype.clearLow = function() {
  this.setLow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketstatEvent.prototype.hasLow = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Qty close = 7;
 * @return {?proto.Qty}
 */
proto.MarketstatEvent.prototype.getClose = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 7));
};


/** @param {?proto.Qty|undefined} value */
proto.MarketstatEvent.prototype.setClose = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.MarketstatEvent.prototype.clearClose = function() {
  this.setClose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketstatEvent.prototype.hasClose = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Qty previousClose = 8;
 * @return {?proto.Qty}
 */
proto.MarketstatEvent.prototype.getPreviousclose = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 8));
};


/** @param {?proto.Qty|undefined} value */
proto.MarketstatEvent.prototype.setPreviousclose = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.MarketstatEvent.prototype.clearPreviousclose = function() {
  this.setPreviousclose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketstatEvent.prototype.hasPreviousclose = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Qty volume = 9;
 * @return {?proto.Qty}
 */
proto.MarketstatEvent.prototype.getVolume = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 9));
};


/** @param {?proto.Qty|undefined} value */
proto.MarketstatEvent.prototype.setVolume = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.MarketstatEvent.prototype.clearVolume = function() {
  this.setVolume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketstatEvent.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Qty value = 10;
 * @return {?proto.Qty}
 */
proto.MarketstatEvent.prototype.getValue = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 10));
};


/** @param {?proto.Qty|undefined} value */
proto.MarketstatEvent.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.MarketstatEvent.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketstatEvent.prototype.hasValue = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string closeDate = 11;
 * @return {string}
 */
proto.MarketstatEvent.prototype.getClosedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.MarketstatEvent.prototype.setClosedate = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string previousCloseDate = 12;
 * @return {string}
 */
proto.MarketstatEvent.prototype.getPreviousclosedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.MarketstatEvent.prototype.setPreviousclosedate = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string tradeHighTime = 13;
 * @return {string}
 */
proto.MarketstatEvent.prototype.getTradehightime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.MarketstatEvent.prototype.setTradehightime = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string tradeLowTime = 14;
 * @return {string}
 */
proto.MarketstatEvent.prototype.getTradelowtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.MarketstatEvent.prototype.setTradelowtime = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string openExchange = 15;
 * @return {string}
 */
proto.MarketstatEvent.prototype.getOpenexchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.MarketstatEvent.prototype.setOpenexchange = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string highExchange = 16;
 * @return {string}
 */
proto.MarketstatEvent.prototype.getHighexchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.MarketstatEvent.prototype.setHighexchange = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string lowExchange = 17;
 * @return {string}
 */
proto.MarketstatEvent.prototype.getLowexchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.MarketstatEvent.prototype.setLowexchange = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string closeExchange = 18;
 * @return {string}
 */
proto.MarketstatEvent.prototype.getCloseexchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.MarketstatEvent.prototype.setCloseexchange = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional OptionAttributes optionAttributes = 19;
 * @return {?proto.OptionAttributes}
 */
proto.MarketstatEvent.prototype.getOptionattributes = function() {
  return /** @type{?proto.OptionAttributes} */ (
    jspb.Message.getWrapperField(this, proto.OptionAttributes, 19));
};


/** @param {?proto.OptionAttributes|undefined} value */
proto.MarketstatEvent.prototype.setOptionattributes = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.MarketstatEvent.prototype.clearOptionattributes = function() {
  this.setOptionattributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketstatEvent.prototype.hasOptionattributes = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImbalanceEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ImbalanceEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ImbalanceEvent.displayName = 'proto.ImbalanceEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImbalanceEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ImbalanceEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImbalanceEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImbalanceEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.Event.toObject(includeInstance, f),
    eventtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    instrument: (f = msg.getInstrument()) && rpc_trade_types_pb.Instrument.toObject(includeInstance, f),
    auctiontype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    exchange: jspb.Message.getFieldWithDefault(msg, 5, ""),
    farprice: (f = msg.getFarprice()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    imbalancevolume: (f = msg.getImbalancevolume()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    instrumentstatus: jspb.Message.getFieldWithDefault(msg, 8, 0),
    marketstatus: jspb.Message.getFieldWithDefault(msg, 9, 0),
    nearprice: (f = msg.getNearprice()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    pairedvolume: (f = msg.getPairedvolume()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    referenceprice: (f = msg.getReferenceprice()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    imbalancetype: jspb.Message.getFieldWithDefault(msg, 13, 0),
    isshortsalerestricted: jspb.Message.getFieldWithDefault(msg, 14, false),
    optionattributes: (f = msg.getOptionattributes()) && proto.OptionAttributes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImbalanceEvent}
 */
proto.ImbalanceEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImbalanceEvent;
  return proto.ImbalanceEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImbalanceEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImbalanceEvent}
 */
proto.ImbalanceEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 2:
      var value = /** @type {!proto.EventType} */ (reader.readEnum());
      msg.setEventtype(value);
      break;
    case 3:
      var value = new rpc_trade_types_pb.Instrument;
      reader.readMessage(value,rpc_trade_types_pb.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 4:
      var value = /** @type {!proto.AuctionType} */ (reader.readEnum());
      msg.setAuctiontype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchange(value);
      break;
    case 6:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setFarprice(value);
      break;
    case 7:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setImbalancevolume(value);
      break;
    case 8:
      var value = /** @type {!proto.InstrumentStatus} */ (reader.readEnum());
      msg.setInstrumentstatus(value);
      break;
    case 9:
      var value = /** @type {!proto.MarketStatus} */ (reader.readEnum());
      msg.setMarketstatus(value);
      break;
    case 10:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setNearprice(value);
      break;
    case 11:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setPairedvolume(value);
      break;
    case 12:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setReferenceprice(value);
      break;
    case 13:
      var value = /** @type {!proto.ImbalanceType} */ (reader.readEnum());
      msg.setImbalancetype(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsshortsalerestricted(value);
      break;
    case 15:
      var value = new proto.OptionAttributes;
      reader.readMessage(value,proto.OptionAttributes.deserializeBinaryFromReader);
      msg.setOptionattributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImbalanceEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImbalanceEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImbalanceEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImbalanceEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
  f = message.getEventtype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      rpc_trade_types_pb.Instrument.serializeBinaryToWriter
    );
  }
  f = message.getAuctiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getExchange();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFarprice();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getImbalancevolume();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getInstrumentstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getMarketstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getNearprice();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getPairedvolume();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getReferenceprice();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getImbalancetype();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getIsshortsalerestricted();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getOptionattributes();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.OptionAttributes.serializeBinaryToWriter
    );
  }
};


/**
 * optional Event event = 1;
 * @return {?proto.Event}
 */
proto.ImbalanceEvent.prototype.getEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 1));
};


/** @param {?proto.Event|undefined} value */
proto.ImbalanceEvent.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ImbalanceEvent.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ImbalanceEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventType eventType = 2;
 * @return {!proto.EventType}
 */
proto.ImbalanceEvent.prototype.getEventtype = function() {
  return /** @type {!proto.EventType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.EventType} value */
proto.ImbalanceEvent.prototype.setEventtype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Instrument instrument = 3;
 * @return {?proto.Instrument}
 */
proto.ImbalanceEvent.prototype.getInstrument = function() {
  return /** @type{?proto.Instrument} */ (
    jspb.Message.getWrapperField(this, rpc_trade_types_pb.Instrument, 3));
};


/** @param {?proto.Instrument|undefined} value */
proto.ImbalanceEvent.prototype.setInstrument = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ImbalanceEvent.prototype.clearInstrument = function() {
  this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ImbalanceEvent.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AuctionType auctionType = 4;
 * @return {!proto.AuctionType}
 */
proto.ImbalanceEvent.prototype.getAuctiontype = function() {
  return /** @type {!proto.AuctionType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.AuctionType} value */
proto.ImbalanceEvent.prototype.setAuctiontype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string exchange = 5;
 * @return {string}
 */
proto.ImbalanceEvent.prototype.getExchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ImbalanceEvent.prototype.setExchange = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Qty farPrice = 6;
 * @return {?proto.Qty}
 */
proto.ImbalanceEvent.prototype.getFarprice = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 6));
};


/** @param {?proto.Qty|undefined} value */
proto.ImbalanceEvent.prototype.setFarprice = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.ImbalanceEvent.prototype.clearFarprice = function() {
  this.setFarprice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ImbalanceEvent.prototype.hasFarprice = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Qty imbalanceVolume = 7;
 * @return {?proto.Qty}
 */
proto.ImbalanceEvent.prototype.getImbalancevolume = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 7));
};


/** @param {?proto.Qty|undefined} value */
proto.ImbalanceEvent.prototype.setImbalancevolume = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.ImbalanceEvent.prototype.clearImbalancevolume = function() {
  this.setImbalancevolume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ImbalanceEvent.prototype.hasImbalancevolume = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional InstrumentStatus instrumentStatus = 8;
 * @return {!proto.InstrumentStatus}
 */
proto.ImbalanceEvent.prototype.getInstrumentstatus = function() {
  return /** @type {!proto.InstrumentStatus} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.InstrumentStatus} value */
proto.ImbalanceEvent.prototype.setInstrumentstatus = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional MarketStatus marketStatus = 9;
 * @return {!proto.MarketStatus}
 */
proto.ImbalanceEvent.prototype.getMarketstatus = function() {
  return /** @type {!proto.MarketStatus} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.MarketStatus} value */
proto.ImbalanceEvent.prototype.setMarketstatus = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional Qty nearPrice = 10;
 * @return {?proto.Qty}
 */
proto.ImbalanceEvent.prototype.getNearprice = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 10));
};


/** @param {?proto.Qty|undefined} value */
proto.ImbalanceEvent.prototype.setNearprice = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.ImbalanceEvent.prototype.clearNearprice = function() {
  this.setNearprice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ImbalanceEvent.prototype.hasNearprice = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Qty pairedVolume = 11;
 * @return {?proto.Qty}
 */
proto.ImbalanceEvent.prototype.getPairedvolume = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 11));
};


/** @param {?proto.Qty|undefined} value */
proto.ImbalanceEvent.prototype.setPairedvolume = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.ImbalanceEvent.prototype.clearPairedvolume = function() {
  this.setPairedvolume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ImbalanceEvent.prototype.hasPairedvolume = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Qty referencePrice = 12;
 * @return {?proto.Qty}
 */
proto.ImbalanceEvent.prototype.getReferenceprice = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 12));
};


/** @param {?proto.Qty|undefined} value */
proto.ImbalanceEvent.prototype.setReferenceprice = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.ImbalanceEvent.prototype.clearReferenceprice = function() {
  this.setReferenceprice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ImbalanceEvent.prototype.hasReferenceprice = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ImbalanceType imbalanceType = 13;
 * @return {!proto.ImbalanceType}
 */
proto.ImbalanceEvent.prototype.getImbalancetype = function() {
  return /** @type {!proto.ImbalanceType} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.ImbalanceType} value */
proto.ImbalanceEvent.prototype.setImbalancetype = function(value) {
  jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional bool isShortSaleRestricted = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ImbalanceEvent.prototype.getIsshortsalerestricted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.ImbalanceEvent.prototype.setIsshortsalerestricted = function(value) {
  jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional OptionAttributes optionAttributes = 15;
 * @return {?proto.OptionAttributes}
 */
proto.ImbalanceEvent.prototype.getOptionattributes = function() {
  return /** @type{?proto.OptionAttributes} */ (
    jspb.Message.getWrapperField(this, proto.OptionAttributes, 15));
};


/** @param {?proto.OptionAttributes|undefined} value */
proto.ImbalanceEvent.prototype.setOptionattributes = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.ImbalanceEvent.prototype.clearOptionattributes = function() {
  this.setOptionattributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ImbalanceEvent.prototype.hasOptionattributes = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LogEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LogEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LogEvent.displayName = 'proto.LogEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LogEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.LogEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LogEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LogEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.Event.toObject(includeInstance, f),
    logeventlevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    exception: (f = msg.getException()) && rpc_base_pb.Object.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LogEvent}
 */
proto.LogEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LogEvent;
  return proto.LogEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LogEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LogEvent}
 */
proto.LogEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 2:
      var value = /** @type {!proto.LogEventLevel} */ (reader.readEnum());
      msg.setLogeventlevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = new rpc_base_pb.Object;
      reader.readMessage(value,rpc_base_pb.Object.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LogEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LogEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LogEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LogEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
  f = message.getLogeventlevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getException();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      rpc_base_pb.Object.serializeBinaryToWriter
    );
  }
};


/**
 * optional Event event = 1;
 * @return {?proto.Event}
 */
proto.LogEvent.prototype.getEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 1));
};


/** @param {?proto.Event|undefined} value */
proto.LogEvent.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LogEvent.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LogEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LogEventLevel logEventLevel = 2;
 * @return {!proto.LogEventLevel}
 */
proto.LogEvent.prototype.getLogeventlevel = function() {
  return /** @type {!proto.LogEventLevel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.LogEventLevel} value */
proto.LogEvent.prototype.setLogeventlevel = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.LogEvent.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.LogEvent.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Object exception = 4;
 * @return {?proto.Object}
 */
proto.LogEvent.prototype.getException = function() {
  return /** @type{?proto.Object} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Object, 4));
};


/** @param {?proto.Object|undefined} value */
proto.LogEvent.prototype.setException = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.LogEvent.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LogEvent.prototype.hasException = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventTimestamps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventTimestamps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EventTimestamps.displayName = 'proto.EventTimestamps';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventTimestamps.prototype.toObject = function(opt_includeInstance) {
  return proto.EventTimestamps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventTimestamps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventTimestamps.toObject = function(includeInstance, msg) {
  var f, obj = {
    processedtimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    receivedtimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventTimestamps}
 */
proto.EventTimestamps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventTimestamps;
  return proto.EventTimestamps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventTimestamps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventTimestamps}
 */
proto.EventTimestamps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProcessedtimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReceivedtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventTimestamps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EventTimestamps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventTimestamps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventTimestamps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getReceivedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 processedTimestamp = 1;
 * @return {number}
 */
proto.EventTimestamps.prototype.getProcessedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.EventTimestamps.prototype.setProcessedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 receivedTimestamp = 2;
 * @return {number}
 */
proto.EventTimestamps.prototype.getReceivedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.EventTimestamps.prototype.setReceivedtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MarketDataEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MarketDataEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MarketDataEvent.displayName = 'proto.MarketDataEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MarketDataEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.MarketDataEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MarketDataEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MarketDataEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.Event.toObject(includeInstance, f),
    exchange: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: (f = msg.getPrice()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    size: (f = msg.getSize()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    exchangetimestamp: (f = msg.getExchangetimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    eventtype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    instrument: (f = msg.getInstrument()) && rpc_trade_types_pb.Instrument.toObject(includeInstance, f),
    eventtimestamps: (f = msg.getEventtimestamps()) && proto.EventTimestamps.toObject(includeInstance, f),
    optionattributes: (f = msg.getOptionattributes()) && proto.OptionAttributes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MarketDataEvent}
 */
proto.MarketDataEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MarketDataEvent;
  return proto.MarketDataEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MarketDataEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MarketDataEvent}
 */
proto.MarketDataEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchange(value);
      break;
    case 3:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setPrice(value);
      break;
    case 4:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setSize(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExchangetimestamp(value);
      break;
    case 6:
      var value = /** @type {!proto.EventType} */ (reader.readEnum());
      msg.setEventtype(value);
      break;
    case 7:
      var value = new rpc_trade_types_pb.Instrument;
      reader.readMessage(value,rpc_trade_types_pb.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 8:
      var value = new proto.EventTimestamps;
      reader.readMessage(value,proto.EventTimestamps.deserializeBinaryFromReader);
      msg.setEventtimestamps(value);
      break;
    case 9:
      var value = new proto.OptionAttributes;
      reader.readMessage(value,proto.OptionAttributes.deserializeBinaryFromReader);
      msg.setOptionattributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MarketDataEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MarketDataEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MarketDataEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MarketDataEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
  f = message.getExchange();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getSize();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getExchangetimestamp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEventtype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      rpc_trade_types_pb.Instrument.serializeBinaryToWriter
    );
  }
  f = message.getEventtimestamps();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.EventTimestamps.serializeBinaryToWriter
    );
  }
  f = message.getOptionattributes();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.OptionAttributes.serializeBinaryToWriter
    );
  }
};


/**
 * optional Event event = 1;
 * @return {?proto.Event}
 */
proto.MarketDataEvent.prototype.getEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 1));
};


/** @param {?proto.Event|undefined} value */
proto.MarketDataEvent.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MarketDataEvent.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketDataEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string exchange = 2;
 * @return {string}
 */
proto.MarketDataEvent.prototype.getExchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MarketDataEvent.prototype.setExchange = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Qty price = 3;
 * @return {?proto.Qty}
 */
proto.MarketDataEvent.prototype.getPrice = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 3));
};


/** @param {?proto.Qty|undefined} value */
proto.MarketDataEvent.prototype.setPrice = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.MarketDataEvent.prototype.clearPrice = function() {
  this.setPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketDataEvent.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Qty size = 4;
 * @return {?proto.Qty}
 */
proto.MarketDataEvent.prototype.getSize = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 4));
};


/** @param {?proto.Qty|undefined} value */
proto.MarketDataEvent.prototype.setSize = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.MarketDataEvent.prototype.clearSize = function() {
  this.setSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketDataEvent.prototype.hasSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp exchangeTimestamp = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.MarketDataEvent.prototype.getExchangetimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.MarketDataEvent.prototype.setExchangetimestamp = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.MarketDataEvent.prototype.clearExchangetimestamp = function() {
  this.setExchangetimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketDataEvent.prototype.hasExchangetimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EventType eventType = 6;
 * @return {!proto.EventType}
 */
proto.MarketDataEvent.prototype.getEventtype = function() {
  return /** @type {!proto.EventType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.EventType} value */
proto.MarketDataEvent.prototype.setEventtype = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional Instrument instrument = 7;
 * @return {?proto.Instrument}
 */
proto.MarketDataEvent.prototype.getInstrument = function() {
  return /** @type{?proto.Instrument} */ (
    jspb.Message.getWrapperField(this, rpc_trade_types_pb.Instrument, 7));
};


/** @param {?proto.Instrument|undefined} value */
proto.MarketDataEvent.prototype.setInstrument = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.MarketDataEvent.prototype.clearInstrument = function() {
  this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketDataEvent.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EventTimestamps eventTimestamps = 8;
 * @return {?proto.EventTimestamps}
 */
proto.MarketDataEvent.prototype.getEventtimestamps = function() {
  return /** @type{?proto.EventTimestamps} */ (
    jspb.Message.getWrapperField(this, proto.EventTimestamps, 8));
};


/** @param {?proto.EventTimestamps|undefined} value */
proto.MarketDataEvent.prototype.setEventtimestamps = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.MarketDataEvent.prototype.clearEventtimestamps = function() {
  this.setEventtimestamps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketDataEvent.prototype.hasEventtimestamps = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OptionAttributes optionAttributes = 9;
 * @return {?proto.OptionAttributes}
 */
proto.MarketDataEvent.prototype.getOptionattributes = function() {
  return /** @type{?proto.OptionAttributes} */ (
    jspb.Message.getWrapperField(this, proto.OptionAttributes, 9));
};


/** @param {?proto.OptionAttributes|undefined} value */
proto.MarketDataEvent.prototype.setOptionattributes = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.MarketDataEvent.prototype.clearOptionattributes = function() {
  this.setOptionattributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MarketDataEvent.prototype.hasOptionattributes = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TradeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TradeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TradeEvent.displayName = 'proto.TradeEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TradeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.TradeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TradeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketdataevent: (f = msg.getMarketdataevent()) && proto.MarketDataEvent.toObject(includeInstance, f),
    tradedate: (f = msg.getTradedate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    tradecondition: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TradeEvent}
 */
proto.TradeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TradeEvent;
  return proto.TradeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TradeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TradeEvent}
 */
proto.TradeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MarketDataEvent;
      reader.readMessage(value,proto.MarketDataEvent.deserializeBinaryFromReader);
      msg.setMarketdataevent(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTradedate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TradeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TradeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TradeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketdataevent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MarketDataEvent.serializeBinaryToWriter
    );
  }
  f = message.getTradedate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTradecondition();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional MarketDataEvent marketDataEvent = 1;
 * @return {?proto.MarketDataEvent}
 */
proto.TradeEvent.prototype.getMarketdataevent = function() {
  return /** @type{?proto.MarketDataEvent} */ (
    jspb.Message.getWrapperField(this, proto.MarketDataEvent, 1));
};


/** @param {?proto.MarketDataEvent|undefined} value */
proto.TradeEvent.prototype.setMarketdataevent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TradeEvent.prototype.clearMarketdataevent = function() {
  this.setMarketdataevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TradeEvent.prototype.hasMarketdataevent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp tradeDate = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.TradeEvent.prototype.getTradedate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.TradeEvent.prototype.setTradedate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TradeEvent.prototype.clearTradedate = function() {
  this.setTradedate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TradeEvent.prototype.hasTradedate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string tradeCondition = 3;
 * @return {string}
 */
proto.TradeEvent.prototype.getTradecondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TradeEvent.prototype.setTradecondition = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DepthOfBookEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DepthOfBookEvent.repeatedFields_, null);
};
goog.inherits(proto.DepthOfBookEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DepthOfBookEvent.displayName = 'proto.DepthOfBookEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DepthOfBookEvent.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DepthOfBookEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.DepthOfBookEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DepthOfBookEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DepthOfBookEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrument: (f = msg.getInstrument()) && rpc_trade_types_pb.Instrument.toObject(includeInstance, f),
    bidsList: jspb.Message.toObjectList(msg.getBidsList(),
    proto.QuoteEvent.toObject, includeInstance),
    asksList: jspb.Message.toObjectList(msg.getAsksList(),
    proto.QuoteEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DepthOfBookEvent}
 */
proto.DepthOfBookEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DepthOfBookEvent;
  return proto.DepthOfBookEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DepthOfBookEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DepthOfBookEvent}
 */
proto.DepthOfBookEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_trade_types_pb.Instrument;
      reader.readMessage(value,rpc_trade_types_pb.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 2:
      var value = new proto.QuoteEvent;
      reader.readMessage(value,proto.QuoteEvent.deserializeBinaryFromReader);
      msg.addBids(value);
      break;
    case 3:
      var value = new proto.QuoteEvent;
      reader.readMessage(value,proto.QuoteEvent.deserializeBinaryFromReader);
      msg.addAsks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DepthOfBookEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DepthOfBookEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DepthOfBookEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DepthOfBookEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_trade_types_pb.Instrument.serializeBinaryToWriter
    );
  }
  f = message.getBidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.QuoteEvent.serializeBinaryToWriter
    );
  }
  f = message.getAsksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.QuoteEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional Instrument instrument = 1;
 * @return {?proto.Instrument}
 */
proto.DepthOfBookEvent.prototype.getInstrument = function() {
  return /** @type{?proto.Instrument} */ (
    jspb.Message.getWrapperField(this, rpc_trade_types_pb.Instrument, 1));
};


/** @param {?proto.Instrument|undefined} value */
proto.DepthOfBookEvent.prototype.setInstrument = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.DepthOfBookEvent.prototype.clearInstrument = function() {
  this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DepthOfBookEvent.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated QuoteEvent bids = 2;
 * @return {!Array<!proto.QuoteEvent>}
 */
proto.DepthOfBookEvent.prototype.getBidsList = function() {
  return /** @type{!Array<!proto.QuoteEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.QuoteEvent, 2));
};


/** @param {!Array<!proto.QuoteEvent>} value */
proto.DepthOfBookEvent.prototype.setBidsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.QuoteEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.QuoteEvent}
 */
proto.DepthOfBookEvent.prototype.addBids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.QuoteEvent, opt_index);
};


proto.DepthOfBookEvent.prototype.clearBidsList = function() {
  this.setBidsList([]);
};


/**
 * repeated QuoteEvent asks = 3;
 * @return {!Array<!proto.QuoteEvent>}
 */
proto.DepthOfBookEvent.prototype.getAsksList = function() {
  return /** @type{!Array<!proto.QuoteEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.QuoteEvent, 3));
};


/** @param {!Array<!proto.QuoteEvent>} value */
proto.DepthOfBookEvent.prototype.setAsksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.QuoteEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.QuoteEvent}
 */
proto.DepthOfBookEvent.prototype.addAsks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.QuoteEvent, opt_index);
};


proto.DepthOfBookEvent.prototype.clearAsksList = function() {
  this.setAsksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TopOfBookEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TopOfBookEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TopOfBookEvent.displayName = 'proto.TopOfBookEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TopOfBookEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.TopOfBookEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TopOfBookEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TopOfBookEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrument: (f = msg.getInstrument()) && rpc_trade_types_pb.Instrument.toObject(includeInstance, f),
    bid: (f = msg.getBid()) && proto.QuoteEvent.toObject(includeInstance, f),
    ask: (f = msg.getAsk()) && proto.QuoteEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TopOfBookEvent}
 */
proto.TopOfBookEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TopOfBookEvent;
  return proto.TopOfBookEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TopOfBookEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TopOfBookEvent}
 */
proto.TopOfBookEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_trade_types_pb.Instrument;
      reader.readMessage(value,rpc_trade_types_pb.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 2:
      var value = new proto.QuoteEvent;
      reader.readMessage(value,proto.QuoteEvent.deserializeBinaryFromReader);
      msg.setBid(value);
      break;
    case 3:
      var value = new proto.QuoteEvent;
      reader.readMessage(value,proto.QuoteEvent.deserializeBinaryFromReader);
      msg.setAsk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TopOfBookEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TopOfBookEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TopOfBookEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TopOfBookEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_trade_types_pb.Instrument.serializeBinaryToWriter
    );
  }
  f = message.getBid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.QuoteEvent.serializeBinaryToWriter
    );
  }
  f = message.getAsk();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.QuoteEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional Instrument instrument = 1;
 * @return {?proto.Instrument}
 */
proto.TopOfBookEvent.prototype.getInstrument = function() {
  return /** @type{?proto.Instrument} */ (
    jspb.Message.getWrapperField(this, rpc_trade_types_pb.Instrument, 1));
};


/** @param {?proto.Instrument|undefined} value */
proto.TopOfBookEvent.prototype.setInstrument = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TopOfBookEvent.prototype.clearInstrument = function() {
  this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TopOfBookEvent.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional QuoteEvent bid = 2;
 * @return {?proto.QuoteEvent}
 */
proto.TopOfBookEvent.prototype.getBid = function() {
  return /** @type{?proto.QuoteEvent} */ (
    jspb.Message.getWrapperField(this, proto.QuoteEvent, 2));
};


/** @param {?proto.QuoteEvent|undefined} value */
proto.TopOfBookEvent.prototype.setBid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TopOfBookEvent.prototype.clearBid = function() {
  this.setBid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TopOfBookEvent.prototype.hasBid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional QuoteEvent ask = 3;
 * @return {?proto.QuoteEvent}
 */
proto.TopOfBookEvent.prototype.getAsk = function() {
  return /** @type{?proto.QuoteEvent} */ (
    jspb.Message.getWrapperField(this, proto.QuoteEvent, 3));
};


/** @param {?proto.QuoteEvent|undefined} value */
proto.TopOfBookEvent.prototype.setAsk = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.TopOfBookEvent.prototype.clearAsk = function() {
  this.setAsk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TopOfBookEvent.prototype.hasAsk = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QuoteEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QuoteEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QuoteEvent.displayName = 'proto.QuoteEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QuoteEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.QuoteEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QuoteEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QuoteEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketdataevent: (f = msg.getMarketdataevent()) && proto.MarketDataEvent.toObject(includeInstance, f),
    quotedate: (f = msg.getQuotedate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    quoteaction: jspb.Message.getFieldWithDefault(msg, 3, 0),
    level: jspb.Message.getFieldWithDefault(msg, 4, 0),
    count: jspb.Message.getFieldWithDefault(msg, 5, 0),
    isempty: jspb.Message.getFieldWithDefault(msg, 6, false),
    isbid: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QuoteEvent}
 */
proto.QuoteEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QuoteEvent;
  return proto.QuoteEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QuoteEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QuoteEvent}
 */
proto.QuoteEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MarketDataEvent;
      reader.readMessage(value,proto.MarketDataEvent.deserializeBinaryFromReader);
      msg.setMarketdataevent(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setQuotedate(value);
      break;
    case 3:
      var value = /** @type {!proto.QuoteAction} */ (reader.readEnum());
      msg.setQuoteaction(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsempty(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsbid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QuoteEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QuoteEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QuoteEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QuoteEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketdataevent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MarketDataEvent.serializeBinaryToWriter
    );
  }
  f = message.getQuotedate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getQuoteaction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIsempty();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsbid();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional MarketDataEvent marketDataEvent = 1;
 * @return {?proto.MarketDataEvent}
 */
proto.QuoteEvent.prototype.getMarketdataevent = function() {
  return /** @type{?proto.MarketDataEvent} */ (
    jspb.Message.getWrapperField(this, proto.MarketDataEvent, 1));
};


/** @param {?proto.MarketDataEvent|undefined} value */
proto.QuoteEvent.prototype.setMarketdataevent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.QuoteEvent.prototype.clearMarketdataevent = function() {
  this.setMarketdataevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.QuoteEvent.prototype.hasMarketdataevent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp quoteDate = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.QuoteEvent.prototype.getQuotedate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.QuoteEvent.prototype.setQuotedate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.QuoteEvent.prototype.clearQuotedate = function() {
  this.setQuotedate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.QuoteEvent.prototype.hasQuotedate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional QuoteAction quoteAction = 3;
 * @return {!proto.QuoteAction}
 */
proto.QuoteEvent.prototype.getQuoteaction = function() {
  return /** @type {!proto.QuoteAction} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.QuoteAction} value */
proto.QuoteEvent.prototype.setQuoteaction = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 level = 4;
 * @return {number}
 */
proto.QuoteEvent.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.QuoteEvent.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 count = 5;
 * @return {number}
 */
proto.QuoteEvent.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.QuoteEvent.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool isEmpty = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.QuoteEvent.prototype.getIsempty = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.QuoteEvent.prototype.setIsempty = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool isBid = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.QuoteEvent.prototype.getIsbid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.QuoteEvent.prototype.setIsbid = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DividendEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DividendEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DividendEvent.displayName = 'proto.DividendEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DividendEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.DividendEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DividendEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DividendEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.Event.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    currency: jspb.Message.getFieldWithDefault(msg, 3, ""),
    declaredate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    executiondate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    frequency: jspb.Message.getFieldWithDefault(msg, 6, 0),
    instrument: (f = msg.getInstrument()) && rpc_trade_types_pb.Instrument.toObject(includeInstance, f),
    paymentdate: jspb.Message.getFieldWithDefault(msg, 8, ""),
    recorddate: jspb.Message.getFieldWithDefault(msg, 9, ""),
    status: jspb.Message.getFieldWithDefault(msg, 10, 0),
    type: jspb.Message.getFieldWithDefault(msg, 11, 0),
    eventtype: jspb.Message.getFieldWithDefault(msg, 12, 0),
    optionattributes: (f = msg.getOptionattributes()) && proto.OptionAttributes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DividendEvent}
 */
proto.DividendEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DividendEvent;
  return proto.DividendEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DividendEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DividendEvent}
 */
proto.DividendEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 2:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeclaredate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutiondate(value);
      break;
    case 6:
      var value = /** @type {!proto.DividendFrequency} */ (reader.readEnum());
      msg.setFrequency(value);
      break;
    case 7:
      var value = new rpc_trade_types_pb.Instrument;
      reader.readMessage(value,rpc_trade_types_pb.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentdate(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecorddate(value);
      break;
    case 10:
      var value = /** @type {!proto.DividendStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 11:
      var value = /** @type {!proto.DividendType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 12:
      var value = /** @type {!proto.EventType} */ (reader.readEnum());
      msg.setEventtype(value);
      break;
    case 13:
      var value = new proto.OptionAttributes;
      reader.readMessage(value,proto.OptionAttributes.deserializeBinaryFromReader);
      msg.setOptionattributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DividendEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DividendEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DividendEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DividendEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeclaredate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExecutiondate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFrequency();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      rpc_trade_types_pb.Instrument.serializeBinaryToWriter
    );
  }
  f = message.getPaymentdate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRecorddate();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getEventtype();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getOptionattributes();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.OptionAttributes.serializeBinaryToWriter
    );
  }
};


/**
 * optional Event event = 1;
 * @return {?proto.Event}
 */
proto.DividendEvent.prototype.getEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 1));
};


/** @param {?proto.Event|undefined} value */
proto.DividendEvent.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.DividendEvent.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DividendEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Qty amount = 2;
 * @return {?proto.Qty}
 */
proto.DividendEvent.prototype.getAmount = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 2));
};


/** @param {?proto.Qty|undefined} value */
proto.DividendEvent.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.DividendEvent.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DividendEvent.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string currency = 3;
 * @return {string}
 */
proto.DividendEvent.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.DividendEvent.prototype.setCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string declareDate = 4;
 * @return {string}
 */
proto.DividendEvent.prototype.getDeclaredate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.DividendEvent.prototype.setDeclaredate = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string executionDate = 5;
 * @return {string}
 */
proto.DividendEvent.prototype.getExecutiondate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.DividendEvent.prototype.setExecutiondate = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional DividendFrequency frequency = 6;
 * @return {!proto.DividendFrequency}
 */
proto.DividendEvent.prototype.getFrequency = function() {
  return /** @type {!proto.DividendFrequency} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.DividendFrequency} value */
proto.DividendEvent.prototype.setFrequency = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional Instrument instrument = 7;
 * @return {?proto.Instrument}
 */
proto.DividendEvent.prototype.getInstrument = function() {
  return /** @type{?proto.Instrument} */ (
    jspb.Message.getWrapperField(this, rpc_trade_types_pb.Instrument, 7));
};


/** @param {?proto.Instrument|undefined} value */
proto.DividendEvent.prototype.setInstrument = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.DividendEvent.prototype.clearInstrument = function() {
  this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DividendEvent.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string paymentDate = 8;
 * @return {string}
 */
proto.DividendEvent.prototype.getPaymentdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.DividendEvent.prototype.setPaymentdate = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string recordDate = 9;
 * @return {string}
 */
proto.DividendEvent.prototype.getRecorddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.DividendEvent.prototype.setRecorddate = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional DividendStatus status = 10;
 * @return {!proto.DividendStatus}
 */
proto.DividendEvent.prototype.getStatus = function() {
  return /** @type {!proto.DividendStatus} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.DividendStatus} value */
proto.DividendEvent.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional DividendType type = 11;
 * @return {!proto.DividendType}
 */
proto.DividendEvent.prototype.getType = function() {
  return /** @type {!proto.DividendType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.DividendType} value */
proto.DividendEvent.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional EventType eventType = 12;
 * @return {!proto.EventType}
 */
proto.DividendEvent.prototype.getEventtype = function() {
  return /** @type {!proto.EventType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.EventType} value */
proto.DividendEvent.prototype.setEventtype = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional OptionAttributes optionAttributes = 13;
 * @return {?proto.OptionAttributes}
 */
proto.DividendEvent.prototype.getOptionattributes = function() {
  return /** @type{?proto.OptionAttributes} */ (
    jspb.Message.getWrapperField(this, proto.OptionAttributes, 13));
};


/** @param {?proto.OptionAttributes|undefined} value */
proto.DividendEvent.prototype.setOptionattributes = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.DividendEvent.prototype.clearOptionattributes = function() {
  this.setOptionattributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DividendEvent.prototype.hasOptionattributes = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OptionAttributes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OptionAttributes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OptionAttributes.displayName = 'proto.OptionAttributes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OptionAttributes.prototype.toObject = function(opt_includeInstance) {
  return proto.OptionAttributes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OptionAttributes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OptionAttributes.toObject = function(includeInstance, msg) {
  var f, obj = {
    underlyinginstrument: (f = msg.getUnderlyinginstrument()) && rpc_trade_types_pb.Instrument.toObject(includeInstance, f),
    expirationtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    multiplier: (f = msg.getMultiplier()) && rpc_base_pb.Qty.toObject(includeInstance, f),
    hasdeliverable: jspb.Message.getFieldWithDefault(msg, 4, false),
    providersymbol: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OptionAttributes}
 */
proto.OptionAttributes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OptionAttributes;
  return proto.OptionAttributes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OptionAttributes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OptionAttributes}
 */
proto.OptionAttributes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_trade_types_pb.Instrument;
      reader.readMessage(value,rpc_trade_types_pb.Instrument.deserializeBinaryFromReader);
      msg.setUnderlyinginstrument(value);
      break;
    case 2:
      var value = /** @type {!proto.ExpirationType} */ (reader.readEnum());
      msg.setExpirationtype(value);
      break;
    case 3:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setMultiplier(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasdeliverable(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvidersymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OptionAttributes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OptionAttributes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OptionAttributes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OptionAttributes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnderlyinginstrument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_trade_types_pb.Instrument.serializeBinaryToWriter
    );
  }
  f = message.getExpirationtype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMultiplier();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
  f = message.getHasdeliverable();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getProvidersymbol();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional Instrument underlyingInstrument = 1;
 * @return {?proto.Instrument}
 */
proto.OptionAttributes.prototype.getUnderlyinginstrument = function() {
  return /** @type{?proto.Instrument} */ (
    jspb.Message.getWrapperField(this, rpc_trade_types_pb.Instrument, 1));
};


/** @param {?proto.Instrument|undefined} value */
proto.OptionAttributes.prototype.setUnderlyinginstrument = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.OptionAttributes.prototype.clearUnderlyinginstrument = function() {
  this.setUnderlyinginstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.OptionAttributes.prototype.hasUnderlyinginstrument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ExpirationType expirationType = 2;
 * @return {!proto.ExpirationType}
 */
proto.OptionAttributes.prototype.getExpirationtype = function() {
  return /** @type {!proto.ExpirationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ExpirationType} value */
proto.OptionAttributes.prototype.setExpirationtype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Qty multiplier = 3;
 * @return {?proto.Qty}
 */
proto.OptionAttributes.prototype.getMultiplier = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 3));
};


/** @param {?proto.Qty|undefined} value */
proto.OptionAttributes.prototype.setMultiplier = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.OptionAttributes.prototype.clearMultiplier = function() {
  this.setMultiplier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.OptionAttributes.prototype.hasMultiplier = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool hasDeliverable = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.OptionAttributes.prototype.getHasdeliverable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.OptionAttributes.prototype.setHasdeliverable = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string providerSymbol = 5;
 * @return {string}
 */
proto.OptionAttributes.prototype.getProvidersymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.OptionAttributes.prototype.setProvidersymbol = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.AuctionType = {
  INVALID_AUCTION_TYPE: 0,
  OPEN_AUCTION_TYPE: 1,
  CLOSE_AUCTION_TYPE: 2,
  HALT_AUCTION_TYPE: 3,
  MARKET_AUCTION_TYPE: 4,
  IPO_AUCTION_TYPE: 5,
  INTRADAY_AUCTION_TYPE: 6
};

/**
 * @enum {number}
 */
proto.InstrumentStatus = {
  OPEN_REGULAR_INSTRUMENT_STATUS: 0,
  OPEN_AUCTION_INSTRUMENT_STATUS: 1,
  OPEN_FAST_INSTRUMENT_STATUS: 2,
  OPEN_SLOW_INSTRUMENT_STATUS: 3,
  CLOSED_REGULAR_INSTRUMENT_STATUS: 4,
  CLOSED_PRE_MARKET_INSTRUMENT_STATUS: 5,
  CLOSED_POST_MARKET_INSTRUMENT_STATUS: 6,
  CLOSED_AUCTION_INSTRUMENT_STATUS: 7,
  CLOSED_IMBALANCE_INSTRUMENT_STATUS: 8,
  CLOSED_ROTATION_INSTRUMENT_STATUS: 9,
  HALTED_REGULAR_INSTRUMENT_STATUS: 10,
  HALTED_QUOTING_ALLOWED_INSTRUMENT_STATUS: 11,
  HALTED_REGULATORY_INSTRUMENT_STATUS: 12,
  HALTED_QUOTING_ALLOWED_REGULATORY_INSTRUMENT_STATUS: 13,
  ACTIVE_REGULAR_INSTRUMENT_STATUS: 14,
  ACTIVE_CLOSING_ORDERS_ONLY_INSTRUMENT_STATUS: 15,
  INACTIVE_REGULAR_INSTRUMENT_STATUS: 16,
  INACTIVE_SUSPENDED_INSTRUMENT_STATUS: 17,
  INACTIVE_DELISTED_INSTRUMENT_STATUS: 18,
  INACTIVE_EXPIRED_INSTRUMENT_STATUS: 19,
  AUCTION_REGULAR_INSTRUMENT_STATUS: 20,
  AUCTION_OPENING_INSTRUMENT_STATUS: 21,
  AUCTION_CALL_OPENING_INSTRUMENT_STATUS: 22,
  AUCTION_CLOSING_INSTRUMENT_STATUS: 23,
  AUCTION_CALL_CLOSING_INSTRUMENT_STATUS: 24,
  AUCTION_INTRADAY_INSTRUMENT_STATUS: 25,
  AUCTION_VOLATILITY_INSTRUMENT_STATUS: 26,
  AUCTION_CALL_INTRADAY_INSTRUMENT_STATUS: 27,
  AUCTION_CALL_VOLATILITY_INSTRUMENT_STATUS: 28,
  AUCTION_INSTRUMENT_STATUS: 29,
  INVALID_INSTRUMENT_STATUS: 30,
  HALTED_INSTRUMENT_STATUS: 31,
  INACTIVE_INSTRUMENT_STATUS: 32,
  CLOSED_INSTRUMENT_STATUS: 33,
  ACTIVE_INSTRUMENT_STATUS: 34,
  OPEN_INSTRUMENT_STATUS: 35
};

/**
 * @enum {number}
 */
proto.MarketStatus = {
  OPEN_REGULAR_MARKET_STATUS: 0,
  OPEN_AUCTION_MARKET_STATUS: 1,
  OPEN_FAST_MARKET_STATUS: 2,
  OPEN_SLOW_MARKET_STATUS: 3,
  CLOSED_REGULAR_MARKET_STATUS: 4,
  CLOSED_PRE_MARKET_MARKET_STATUS: 5,
  CLOSED_POST_MARKET_MARKET_STATUS: 6,
  CLOSED_AUCTION_MARKET_STATUS: 7,
  CLOSED_IMBALANCE_MARKET_STATUS: 8,
  CLOSED_ROTATION_MARKET_STATUS: 9,
  HALTED_REGULAR_MARKET_STATUS: 10,
  HALTED_QUOTING_ALLOWED_MARKET_STATUS: 11,
  HALTED_REGULATORY_MARKET_STATUS: 12,
  HALTED_QUOTING_ALLOWED_REGULATORY_MARKET_STATUS: 13,
  ACTIVE_REGULAR_MARKET_STATUS: 14,
  ACTIVE_CLOSING_ORDERS_ONLY_MARKET_STATUS: 15,
  INACTIVE_REGULAR_MARKET_STATUS: 16,
  INACTIVE_SUSPENDED_MARKET_STATUS: 17,
  INACTIVE_DELISTED_MARKET_STATUS: 18,
  INACTIVE_EXPIRED_MARKET_STATUS: 19,
  AUCTION_REGULAR_MARKET_STATUS: 20,
  AUCTION_OPENING_MARKET_STATUS: 21,
  AUCTION_CALL_OPENING_MARKET_STATUS: 22,
  AUCTION_CLOSING_MARKET_STATUS: 23,
  AUCTION_CALL_CLOSING_MARKET_STATUS: 24,
  AUCTION_INTRADAY_MARKET_STATUS: 25,
  AUCTION_VOLATILITY_MARKET_STATUS: 26,
  AUCTION_CALL_INTRADAY_MARKET_STATUS: 27,
  AUCTION_CALL_VOLATILITY_MARKET_STATUS: 28,
  AUCTION_MARKET_STATUS: 29,
  INVALID_MARKET_STATUS: 30,
  HALTED_MARKET_STATUS: 31,
  INACTIVE_MARKET_STATUS: 32,
  CLOSED_MARKET_STATUS: 33,
  ACTIVE_MARKET_STATUS: 34,
  OPEN_MARKET_STATUS: 35
};

/**
 * @enum {number}
 */
proto.ImbalanceType = {
  INVALID_IMBALANCE_TYPE: 0,
  NONE_IMBALANCE_TYPE: 1,
  BUY_IMBALANCE_TYPE: 2,
  SELL_IMBALANCE_TYPE: 3
};

/**
 * @enum {number}
 */
proto.LogEventLevel = {
  DEBUG_LOG_EVENT_LEVEL: 0,
  INFO_LOG_EVENT_LEVEL: 1,
  WARN_LOG_EVENT_LEVEL: 2,
  ERROR_LOG_EVENT_LEVEL: 3
};

/**
 * @enum {number}
 */
proto.DividendStatus = {
  UNOFFICIAL_DIVIDEND_STATUS: 0,
  OFFICIAL_DIVIDEND_STATUS: 1,
  UNKNOWN_DIVIDEND_STATUS: 2
};

/**
 * @enum {number}
 */
proto.DividendType = {
  CURRENT_DIVIDEND_TYPE: 0,
  SPECIAL_DIVIDEND_TYPE: 1,
  FUTURE_DIVIDEND_TYPE: 2,
  UNKNOWN_DIVIDEND_TYPE: 3
};

/**
 * @enum {number}
 */
proto.DividendFrequency = {
  ANNUALLY_DIVIDEND_FREQUENCY: 0,
  MONTHLY_DIVIDEND_FREQUENCY: 1,
  QUARTERLY_DIVIDEND_FREQUENCY: 2,
  SEMI_ANNUALLY_DIVIDEND_FREQUENCY: 3,
  OTHER_DIVIDEND_FREQUENCY: 4
};

/**
 * @enum {number}
 */
proto.QuoteAction = {
  ADD_QUOTE_ACTION: 0,
  CHANGE_QUOTE_ACTION: 1,
  DELETE_QUOTE_ACTION: 2
};

/**
 * @enum {number}
 */
proto.ContentAndCapability = {
  TOP_OF_BOOK: 0,
  OPEN_BOOK: 1,
  MARKET_STAT: 2,
  TOTAL_VIEW: 3,
  LEVEL_2: 4,
  LATEST_TICK: 5,
  BBO10: 6,
  NBBO: 7,
  DIVIDEND: 8,
  AGGREGATED_DEPTH: 9,
  UNAGGREGATED_DEPTH: 10,
  IMBALANCE: 11,
  UNKNOWN: 12,
  EVENT_BOUNDARY: 13
};

/**
 * @enum {number}
 */
proto.FeedStatus = {
  OFFLINE_FEED_STATUS: 0,
  ERROR_FEED_STATUS: 1,
  AVAILABLE_FEED_STATUS: 2,
  UNKNOWN_FEED_STATUS: 3
};

/**
 * @enum {number}
 */
proto.EventType = {
  SNAPSHOT_PART: 0,
  SNAPSHOT_FINAL: 1,
  UPDATE_PART: 2,
  UPDATE_FINAL: 3,
  UNKNOWN_EVENT_TYPE: 4
};

/**
 * @enum {number}
 */
proto.ExpirationType = {
  EUROPEAN_EXPIRATION_TYPE: 0,
  AMERICAN_EXPIRATION_TYPE: 1,
  UNKNOWN_EXPIRATION_TYPE: 2
};

goog.object.extend(exports, proto);
