/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var rpc_base_pb = require('./rpc_base_pb.js');
var rpc_paging_pb = require('./rpc_paging_pb.js');
var rpc_trade_types_pb = require('./rpc_trade_types_pb.js');
var rpc_fix_admin_pb = require('./rpc_fix_admin_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.AddReportRequest', null, global);
goog.exportSymbol('proto.AddReportResponse', null, global);
goog.exportSymbol('proto.AddTradeMessageListenerRequest', null, global);
goog.exportSymbol('proto.DeleteReportRequest', null, global);
goog.exportSymbol('proto.DeleteReportResponse', null, global);
goog.exportSymbol('proto.FindRootOrderIdRequest', null, global);
goog.exportSymbol('proto.FindRootOrderIdResponse', null, global);
goog.exportSymbol('proto.GetAllPositionsAsOfRequest', null, global);
goog.exportSymbol('proto.GetAllPositionsAsOfResponse', null, global);
goog.exportSymbol('proto.GetAllPositionsByRootAsOfRequest', null, global);
goog.exportSymbol('proto.GetAllPositionsByRootAsOfResponse', null, global);
goog.exportSymbol('proto.GetAverageFillPricesRequest', null, global);
goog.exportSymbol('proto.GetAverageFillPricesResponse', null, global);
goog.exportSymbol('proto.GetFillsRequest', null, global);
goog.exportSymbol('proto.GetFillsResponse', null, global);
goog.exportSymbol('proto.GetLatestExecutionReportForOrderChainRequest', null, global);
goog.exportSymbol('proto.GetLatestExecutionReportForOrderChainResponse', null, global);
goog.exportSymbol('proto.GetPositionAsOfRequest', null, global);
goog.exportSymbol('proto.GetPositionAsOfResponse', null, global);
goog.exportSymbol('proto.GetReportsRequest', null, global);
goog.exportSymbol('proto.GetReportsResponse', null, global);
goog.exportSymbol('proto.OpenOrdersRequest', null, global);
goog.exportSymbol('proto.OpenOrdersResponse', null, global);
goog.exportSymbol('proto.OrderResponse', null, global);
goog.exportSymbol('proto.ReadAvailableFixInitiatorSessionsRequest', null, global);
goog.exportSymbol('proto.ReadAvailableFixInitiatorSessionsResponse', null, global);
goog.exportSymbol('proto.RemoveTradeMessageListenerRequest', null, global);
goog.exportSymbol('proto.RemoveTradeMessageListenerResponse', null, global);
goog.exportSymbol('proto.ResolveSymbolRequest', null, global);
goog.exportSymbol('proto.ResolveSymbolResponse', null, global);
goog.exportSymbol('proto.SendOrderRequest', null, global);
goog.exportSymbol('proto.SendOrderResponse', null, global);
goog.exportSymbol('proto.TradeMessageListenerResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OpenOrdersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OpenOrdersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OpenOrdersRequest.displayName = 'proto.OpenOrdersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OpenOrdersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.OpenOrdersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OpenOrdersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OpenOrdersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pagerequest: (f = msg.getPagerequest()) && rpc_paging_pb.PageRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OpenOrdersRequest}
 */
proto.OpenOrdersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OpenOrdersRequest;
  return proto.OpenOrdersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OpenOrdersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OpenOrdersRequest}
 */
proto.OpenOrdersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = new rpc_paging_pb.PageRequest;
      reader.readMessage(value,rpc_paging_pb.PageRequest.deserializeBinaryFromReader);
      msg.setPagerequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OpenOrdersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OpenOrdersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OpenOrdersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OpenOrdersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPagerequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_paging_pb.PageRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.OpenOrdersRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.OpenOrdersRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PageRequest pageRequest = 2;
 * @return {?proto.PageRequest}
 */
proto.OpenOrdersRequest.prototype.getPagerequest = function() {
  return /** @type{?proto.PageRequest} */ (
    jspb.Message.getWrapperField(this, rpc_paging_pb.PageRequest, 2));
};


/** @param {?proto.PageRequest|undefined} value */
proto.OpenOrdersRequest.prototype.setPagerequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.OpenOrdersRequest.prototype.clearPagerequest = function() {
  this.setPagerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.OpenOrdersRequest.prototype.hasPagerequest = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OpenOrdersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OpenOrdersResponse.repeatedFields_, null);
};
goog.inherits(proto.OpenOrdersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OpenOrdersResponse.displayName = 'proto.OpenOrdersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OpenOrdersResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OpenOrdersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.OpenOrdersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OpenOrdersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OpenOrdersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageresponse: (f = msg.getPageresponse()) && rpc_paging_pb.PageResponse.toObject(includeInstance, f),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    rpc_trade_types_pb.OrderSummary.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OpenOrdersResponse}
 */
proto.OpenOrdersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OpenOrdersResponse;
  return proto.OpenOrdersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OpenOrdersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OpenOrdersResponse}
 */
proto.OpenOrdersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_paging_pb.PageResponse;
      reader.readMessage(value,rpc_paging_pb.PageResponse.deserializeBinaryFromReader);
      msg.setPageresponse(value);
      break;
    case 2:
      var value = new rpc_trade_types_pb.OrderSummary;
      reader.readMessage(value,rpc_trade_types_pb.OrderSummary.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OpenOrdersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OpenOrdersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OpenOrdersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OpenOrdersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_paging_pb.PageResponse.serializeBinaryToWriter
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      rpc_trade_types_pb.OrderSummary.serializeBinaryToWriter
    );
  }
};


/**
 * optional PageResponse pageResponse = 1;
 * @return {?proto.PageResponse}
 */
proto.OpenOrdersResponse.prototype.getPageresponse = function() {
  return /** @type{?proto.PageResponse} */ (
    jspb.Message.getWrapperField(this, rpc_paging_pb.PageResponse, 1));
};


/** @param {?proto.PageResponse|undefined} value */
proto.OpenOrdersResponse.prototype.setPageresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.OpenOrdersResponse.prototype.clearPageresponse = function() {
  this.setPageresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.OpenOrdersResponse.prototype.hasPageresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated OrderSummary orders = 2;
 * @return {!Array<!proto.OrderSummary>}
 */
proto.OpenOrdersResponse.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.OrderSummary>} */ (
    jspb.Message.getRepeatedWrapperField(this, rpc_trade_types_pb.OrderSummary, 2));
};


/** @param {!Array<!proto.OrderSummary>} value */
proto.OpenOrdersResponse.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.OrderSummary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OrderSummary}
 */
proto.OpenOrdersResponse.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.OrderSummary, opt_index);
};


proto.OpenOrdersResponse.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetReportsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetReportsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetReportsRequest.displayName = 'proto.GetReportsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetReportsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetReportsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetReportsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetReportsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pagerequest: (f = msg.getPagerequest()) && rpc_paging_pb.PageRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetReportsRequest}
 */
proto.GetReportsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetReportsRequest;
  return proto.GetReportsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetReportsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetReportsRequest}
 */
proto.GetReportsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = new rpc_paging_pb.PageRequest;
      reader.readMessage(value,rpc_paging_pb.PageRequest.deserializeBinaryFromReader);
      msg.setPagerequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetReportsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetReportsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetReportsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetReportsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPagerequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_paging_pb.PageRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.GetReportsRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetReportsRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PageRequest pageRequest = 2;
 * @return {?proto.PageRequest}
 */
proto.GetReportsRequest.prototype.getPagerequest = function() {
  return /** @type{?proto.PageRequest} */ (
    jspb.Message.getWrapperField(this, rpc_paging_pb.PageRequest, 2));
};


/** @param {?proto.PageRequest|undefined} value */
proto.GetReportsRequest.prototype.setPagerequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GetReportsRequest.prototype.clearPagerequest = function() {
  this.setPagerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetReportsRequest.prototype.hasPagerequest = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetReportsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetReportsResponse.repeatedFields_, null);
};
goog.inherits(proto.GetReportsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetReportsResponse.displayName = 'proto.GetReportsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetReportsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetReportsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetReportsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetReportsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetReportsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageresponse: (f = msg.getPageresponse()) && rpc_paging_pb.PageResponse.toObject(includeInstance, f),
    reportsList: jspb.Message.toObjectList(msg.getReportsList(),
    rpc_trade_types_pb.Report.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetReportsResponse}
 */
proto.GetReportsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetReportsResponse;
  return proto.GetReportsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetReportsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetReportsResponse}
 */
proto.GetReportsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_paging_pb.PageResponse;
      reader.readMessage(value,rpc_paging_pb.PageResponse.deserializeBinaryFromReader);
      msg.setPageresponse(value);
      break;
    case 2:
      var value = new rpc_trade_types_pb.Report;
      reader.readMessage(value,rpc_trade_types_pb.Report.deserializeBinaryFromReader);
      msg.addReports(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetReportsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetReportsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetReportsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetReportsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_paging_pb.PageResponse.serializeBinaryToWriter
    );
  }
  f = message.getReportsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      rpc_trade_types_pb.Report.serializeBinaryToWriter
    );
  }
};


/**
 * optional PageResponse pageResponse = 1;
 * @return {?proto.PageResponse}
 */
proto.GetReportsResponse.prototype.getPageresponse = function() {
  return /** @type{?proto.PageResponse} */ (
    jspb.Message.getWrapperField(this, rpc_paging_pb.PageResponse, 1));
};


/** @param {?proto.PageResponse|undefined} value */
proto.GetReportsResponse.prototype.setPageresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetReportsResponse.prototype.clearPageresponse = function() {
  this.setPageresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetReportsResponse.prototype.hasPageresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Report reports = 2;
 * @return {!Array<!proto.Report>}
 */
proto.GetReportsResponse.prototype.getReportsList = function() {
  return /** @type{!Array<!proto.Report>} */ (
    jspb.Message.getRepeatedWrapperField(this, rpc_trade_types_pb.Report, 2));
};


/** @param {!Array<!proto.Report>} value */
proto.GetReportsResponse.prototype.setReportsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Report=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Report}
 */
proto.GetReportsResponse.prototype.addReports = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Report, opt_index);
};


proto.GetReportsResponse.prototype.clearReportsList = function() {
  this.setReportsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetFillsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetFillsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetFillsRequest.displayName = 'proto.GetFillsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetFillsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetFillsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetFillsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetFillsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pagerequest: (f = msg.getPagerequest()) && rpc_paging_pb.PageRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetFillsRequest}
 */
proto.GetFillsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetFillsRequest;
  return proto.GetFillsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetFillsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetFillsRequest}
 */
proto.GetFillsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = new rpc_paging_pb.PageRequest;
      reader.readMessage(value,rpc_paging_pb.PageRequest.deserializeBinaryFromReader);
      msg.setPagerequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetFillsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetFillsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetFillsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetFillsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPagerequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_paging_pb.PageRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.GetFillsRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetFillsRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PageRequest pageRequest = 2;
 * @return {?proto.PageRequest}
 */
proto.GetFillsRequest.prototype.getPagerequest = function() {
  return /** @type{?proto.PageRequest} */ (
    jspb.Message.getWrapperField(this, rpc_paging_pb.PageRequest, 2));
};


/** @param {?proto.PageRequest|undefined} value */
proto.GetFillsRequest.prototype.setPagerequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GetFillsRequest.prototype.clearPagerequest = function() {
  this.setPagerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetFillsRequest.prototype.hasPagerequest = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetFillsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetFillsResponse.repeatedFields_, null);
};
goog.inherits(proto.GetFillsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetFillsResponse.displayName = 'proto.GetFillsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetFillsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetFillsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetFillsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetFillsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetFillsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageresponse: (f = msg.getPageresponse()) && rpc_paging_pb.PageResponse.toObject(includeInstance, f),
    fillsList: jspb.Message.toObjectList(msg.getFillsList(),
    rpc_trade_types_pb.ExecutionReportSummary.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetFillsResponse}
 */
proto.GetFillsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetFillsResponse;
  return proto.GetFillsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetFillsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetFillsResponse}
 */
proto.GetFillsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_paging_pb.PageResponse;
      reader.readMessage(value,rpc_paging_pb.PageResponse.deserializeBinaryFromReader);
      msg.setPageresponse(value);
      break;
    case 2:
      var value = new rpc_trade_types_pb.ExecutionReportSummary;
      reader.readMessage(value,rpc_trade_types_pb.ExecutionReportSummary.deserializeBinaryFromReader);
      msg.addFills(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetFillsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetFillsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetFillsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetFillsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_paging_pb.PageResponse.serializeBinaryToWriter
    );
  }
  f = message.getFillsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      rpc_trade_types_pb.ExecutionReportSummary.serializeBinaryToWriter
    );
  }
};


/**
 * optional PageResponse pageResponse = 1;
 * @return {?proto.PageResponse}
 */
proto.GetFillsResponse.prototype.getPageresponse = function() {
  return /** @type{?proto.PageResponse} */ (
    jspb.Message.getWrapperField(this, rpc_paging_pb.PageResponse, 1));
};


/** @param {?proto.PageResponse|undefined} value */
proto.GetFillsResponse.prototype.setPageresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetFillsResponse.prototype.clearPageresponse = function() {
  this.setPageresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetFillsResponse.prototype.hasPageresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ExecutionReportSummary fills = 2;
 * @return {!Array<!proto.ExecutionReportSummary>}
 */
proto.GetFillsResponse.prototype.getFillsList = function() {
  return /** @type{!Array<!proto.ExecutionReportSummary>} */ (
    jspb.Message.getRepeatedWrapperField(this, rpc_trade_types_pb.ExecutionReportSummary, 2));
};


/** @param {!Array<!proto.ExecutionReportSummary>} value */
proto.GetFillsResponse.prototype.setFillsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ExecutionReportSummary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ExecutionReportSummary}
 */
proto.GetFillsResponse.prototype.addFills = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ExecutionReportSummary, opt_index);
};


proto.GetFillsResponse.prototype.clearFillsList = function() {
  this.setFillsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetAverageFillPricesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetAverageFillPricesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetAverageFillPricesRequest.displayName = 'proto.GetAverageFillPricesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetAverageFillPricesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetAverageFillPricesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetAverageFillPricesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAverageFillPricesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pagerequest: (f = msg.getPagerequest()) && rpc_paging_pb.PageRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetAverageFillPricesRequest}
 */
proto.GetAverageFillPricesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetAverageFillPricesRequest;
  return proto.GetAverageFillPricesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetAverageFillPricesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetAverageFillPricesRequest}
 */
proto.GetAverageFillPricesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = new rpc_paging_pb.PageRequest;
      reader.readMessage(value,rpc_paging_pb.PageRequest.deserializeBinaryFromReader);
      msg.setPagerequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetAverageFillPricesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetAverageFillPricesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetAverageFillPricesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAverageFillPricesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPagerequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_paging_pb.PageRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.GetAverageFillPricesRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetAverageFillPricesRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PageRequest pageRequest = 2;
 * @return {?proto.PageRequest}
 */
proto.GetAverageFillPricesRequest.prototype.getPagerequest = function() {
  return /** @type{?proto.PageRequest} */ (
    jspb.Message.getWrapperField(this, rpc_paging_pb.PageRequest, 2));
};


/** @param {?proto.PageRequest|undefined} value */
proto.GetAverageFillPricesRequest.prototype.setPagerequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GetAverageFillPricesRequest.prototype.clearPagerequest = function() {
  this.setPagerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetAverageFillPricesRequest.prototype.hasPagerequest = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetAverageFillPricesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetAverageFillPricesResponse.repeatedFields_, null);
};
goog.inherits(proto.GetAverageFillPricesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetAverageFillPricesResponse.displayName = 'proto.GetAverageFillPricesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetAverageFillPricesResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetAverageFillPricesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetAverageFillPricesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetAverageFillPricesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAverageFillPricesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageresponse: (f = msg.getPageresponse()) && rpc_paging_pb.PageResponse.toObject(includeInstance, f),
    averagefillpricesList: jspb.Message.toObjectList(msg.getAveragefillpricesList(),
    rpc_trade_types_pb.AverageFillPrice.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetAverageFillPricesResponse}
 */
proto.GetAverageFillPricesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetAverageFillPricesResponse;
  return proto.GetAverageFillPricesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetAverageFillPricesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetAverageFillPricesResponse}
 */
proto.GetAverageFillPricesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_paging_pb.PageResponse;
      reader.readMessage(value,rpc_paging_pb.PageResponse.deserializeBinaryFromReader);
      msg.setPageresponse(value);
      break;
    case 2:
      var value = new rpc_trade_types_pb.AverageFillPrice;
      reader.readMessage(value,rpc_trade_types_pb.AverageFillPrice.deserializeBinaryFromReader);
      msg.addAveragefillprices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetAverageFillPricesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetAverageFillPricesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetAverageFillPricesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAverageFillPricesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_paging_pb.PageResponse.serializeBinaryToWriter
    );
  }
  f = message.getAveragefillpricesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      rpc_trade_types_pb.AverageFillPrice.serializeBinaryToWriter
    );
  }
};


/**
 * optional PageResponse pageResponse = 1;
 * @return {?proto.PageResponse}
 */
proto.GetAverageFillPricesResponse.prototype.getPageresponse = function() {
  return /** @type{?proto.PageResponse} */ (
    jspb.Message.getWrapperField(this, rpc_paging_pb.PageResponse, 1));
};


/** @param {?proto.PageResponse|undefined} value */
proto.GetAverageFillPricesResponse.prototype.setPageresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetAverageFillPricesResponse.prototype.clearPageresponse = function() {
  this.setPageresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetAverageFillPricesResponse.prototype.hasPageresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AverageFillPrice averageFillPrices = 2;
 * @return {!Array<!proto.AverageFillPrice>}
 */
proto.GetAverageFillPricesResponse.prototype.getAveragefillpricesList = function() {
  return /** @type{!Array<!proto.AverageFillPrice>} */ (
    jspb.Message.getRepeatedWrapperField(this, rpc_trade_types_pb.AverageFillPrice, 2));
};


/** @param {!Array<!proto.AverageFillPrice>} value */
proto.GetAverageFillPricesResponse.prototype.setAveragefillpricesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.AverageFillPrice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AverageFillPrice}
 */
proto.GetAverageFillPricesResponse.prototype.addAveragefillprices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.AverageFillPrice, opt_index);
};


proto.GetAverageFillPricesResponse.prototype.clearAveragefillpricesList = function() {
  this.setAveragefillpricesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SendOrderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SendOrderRequest.repeatedFields_, null);
};
goog.inherits(proto.SendOrderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SendOrderRequest.displayName = 'proto.SendOrderRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SendOrderRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SendOrderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SendOrderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SendOrderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendOrderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    rpc_trade_types_pb.Order.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SendOrderRequest}
 */
proto.SendOrderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SendOrderRequest;
  return proto.SendOrderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SendOrderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SendOrderRequest}
 */
proto.SendOrderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = new rpc_trade_types_pb.Order;
      reader.readMessage(value,rpc_trade_types_pb.Order.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SendOrderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SendOrderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SendOrderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendOrderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      rpc_trade_types_pb.Order.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.SendOrderRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SendOrderRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Order order = 2;
 * @return {!Array<!proto.Order>}
 */
proto.SendOrderRequest.prototype.getOrderList = function() {
  return /** @type{!Array<!proto.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, rpc_trade_types_pb.Order, 2));
};


/** @param {!Array<!proto.Order>} value */
proto.SendOrderRequest.prototype.setOrderList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Order}
 */
proto.SendOrderRequest.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Order, opt_index);
};


proto.SendOrderRequest.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SendOrderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SendOrderResponse.repeatedFields_, null);
};
goog.inherits(proto.SendOrderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SendOrderResponse.displayName = 'proto.SendOrderResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SendOrderResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SendOrderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SendOrderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SendOrderResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendOrderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderresponseList: jspb.Message.toObjectList(msg.getOrderresponseList(),
    proto.OrderResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SendOrderResponse}
 */
proto.SendOrderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SendOrderResponse;
  return proto.SendOrderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SendOrderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SendOrderResponse}
 */
proto.SendOrderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.OrderResponse;
      reader.readMessage(value,proto.OrderResponse.deserializeBinaryFromReader);
      msg.addOrderresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SendOrderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SendOrderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SendOrderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendOrderResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderresponseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.OrderResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated OrderResponse orderResponse = 1;
 * @return {!Array<!proto.OrderResponse>}
 */
proto.SendOrderResponse.prototype.getOrderresponseList = function() {
  return /** @type{!Array<!proto.OrderResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.OrderResponse, 1));
};


/** @param {!Array<!proto.OrderResponse>} value */
proto.SendOrderResponse.prototype.setOrderresponseList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.OrderResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OrderResponse}
 */
proto.SendOrderResponse.prototype.addOrderresponse = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.OrderResponse, opt_index);
};


proto.SendOrderResponse.prototype.clearOrderresponseList = function() {
  this.setOrderresponseList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OrderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OrderResponse.displayName = 'proto.OrderResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.OrderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrderResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrderResponse}
 */
proto.OrderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrderResponse;
  return proto.OrderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrderResponse}
 */
proto.OrderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string orderid = 1;
 * @return {string}
 */
proto.OrderResponse.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.OrderResponse.prototype.setOrderid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetLatestExecutionReportForOrderChainRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetLatestExecutionReportForOrderChainRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetLatestExecutionReportForOrderChainRequest.displayName = 'proto.GetLatestExecutionReportForOrderChainRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetLatestExecutionReportForOrderChainRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetLatestExecutionReportForOrderChainRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetLatestExecutionReportForOrderChainRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetLatestExecutionReportForOrderChainRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orderid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetLatestExecutionReportForOrderChainRequest}
 */
proto.GetLatestExecutionReportForOrderChainRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetLatestExecutionReportForOrderChainRequest;
  return proto.GetLatestExecutionReportForOrderChainRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetLatestExecutionReportForOrderChainRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetLatestExecutionReportForOrderChainRequest}
 */
proto.GetLatestExecutionReportForOrderChainRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetLatestExecutionReportForOrderChainRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetLatestExecutionReportForOrderChainRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetLatestExecutionReportForOrderChainRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetLatestExecutionReportForOrderChainRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.GetLatestExecutionReportForOrderChainRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetLatestExecutionReportForOrderChainRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string orderId = 2;
 * @return {string}
 */
proto.GetLatestExecutionReportForOrderChainRequest.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GetLatestExecutionReportForOrderChainRequest.prototype.setOrderid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetLatestExecutionReportForOrderChainResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetLatestExecutionReportForOrderChainResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetLatestExecutionReportForOrderChainResponse.displayName = 'proto.GetLatestExecutionReportForOrderChainResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetLatestExecutionReportForOrderChainResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetLatestExecutionReportForOrderChainResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetLatestExecutionReportForOrderChainResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetLatestExecutionReportForOrderChainResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    executionreport: (f = msg.getExecutionreport()) && rpc_trade_types_pb.TradeMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetLatestExecutionReportForOrderChainResponse}
 */
proto.GetLatestExecutionReportForOrderChainResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetLatestExecutionReportForOrderChainResponse;
  return proto.GetLatestExecutionReportForOrderChainResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetLatestExecutionReportForOrderChainResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetLatestExecutionReportForOrderChainResponse}
 */
proto.GetLatestExecutionReportForOrderChainResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_trade_types_pb.TradeMessage;
      reader.readMessage(value,rpc_trade_types_pb.TradeMessage.deserializeBinaryFromReader);
      msg.setExecutionreport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetLatestExecutionReportForOrderChainResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetLatestExecutionReportForOrderChainResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetLatestExecutionReportForOrderChainResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetLatestExecutionReportForOrderChainResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExecutionreport();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_trade_types_pb.TradeMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional TradeMessage executionReport = 1;
 * @return {?proto.TradeMessage}
 */
proto.GetLatestExecutionReportForOrderChainResponse.prototype.getExecutionreport = function() {
  return /** @type{?proto.TradeMessage} */ (
    jspb.Message.getWrapperField(this, rpc_trade_types_pb.TradeMessage, 1));
};


/** @param {?proto.TradeMessage|undefined} value */
proto.GetLatestExecutionReportForOrderChainResponse.prototype.setExecutionreport = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetLatestExecutionReportForOrderChainResponse.prototype.clearExecutionreport = function() {
  this.setExecutionreport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetLatestExecutionReportForOrderChainResponse.prototype.hasExecutionreport = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddTradeMessageListenerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddTradeMessageListenerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AddTradeMessageListenerRequest.displayName = 'proto.AddTradeMessageListenerRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddTradeMessageListenerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AddTradeMessageListenerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddTradeMessageListenerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddTradeMessageListenerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    listenerid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddTradeMessageListenerRequest}
 */
proto.AddTradeMessageListenerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddTradeMessageListenerRequest;
  return proto.AddTradeMessageListenerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddTradeMessageListenerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddTradeMessageListenerRequest}
 */
proto.AddTradeMessageListenerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setListenerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddTradeMessageListenerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddTradeMessageListenerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddTradeMessageListenerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddTradeMessageListenerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getListenerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.AddTradeMessageListenerRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AddTradeMessageListenerRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string listenerId = 2;
 * @return {string}
 */
proto.AddTradeMessageListenerRequest.prototype.getListenerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AddTradeMessageListenerRequest.prototype.setListenerid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TradeMessageListenerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TradeMessageListenerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TradeMessageListenerResponse.displayName = 'proto.TradeMessageListenerResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TradeMessageListenerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.TradeMessageListenerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TradeMessageListenerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeMessageListenerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    trademessage: (f = msg.getTrademessage()) && rpc_trade_types_pb.TradeMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TradeMessageListenerResponse}
 */
proto.TradeMessageListenerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TradeMessageListenerResponse;
  return proto.TradeMessageListenerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TradeMessageListenerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TradeMessageListenerResponse}
 */
proto.TradeMessageListenerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_trade_types_pb.TradeMessage;
      reader.readMessage(value,rpc_trade_types_pb.TradeMessage.deserializeBinaryFromReader);
      msg.setTrademessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TradeMessageListenerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TradeMessageListenerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TradeMessageListenerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeMessageListenerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrademessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_trade_types_pb.TradeMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional TradeMessage tradeMessage = 1;
 * @return {?proto.TradeMessage}
 */
proto.TradeMessageListenerResponse.prototype.getTrademessage = function() {
  return /** @type{?proto.TradeMessage} */ (
    jspb.Message.getWrapperField(this, rpc_trade_types_pb.TradeMessage, 1));
};


/** @param {?proto.TradeMessage|undefined} value */
proto.TradeMessageListenerResponse.prototype.setTrademessage = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TradeMessageListenerResponse.prototype.clearTrademessage = function() {
  this.setTrademessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TradeMessageListenerResponse.prototype.hasTrademessage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveTradeMessageListenerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveTradeMessageListenerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RemoveTradeMessageListenerRequest.displayName = 'proto.RemoveTradeMessageListenerRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveTradeMessageListenerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveTradeMessageListenerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveTradeMessageListenerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemoveTradeMessageListenerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    listenerid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveTradeMessageListenerRequest}
 */
proto.RemoveTradeMessageListenerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveTradeMessageListenerRequest;
  return proto.RemoveTradeMessageListenerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveTradeMessageListenerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveTradeMessageListenerRequest}
 */
proto.RemoveTradeMessageListenerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setListenerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveTradeMessageListenerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemoveTradeMessageListenerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemoveTradeMessageListenerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemoveTradeMessageListenerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getListenerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.RemoveTradeMessageListenerRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RemoveTradeMessageListenerRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string listenerId = 2;
 * @return {string}
 */
proto.RemoveTradeMessageListenerRequest.prototype.getListenerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RemoveTradeMessageListenerRequest.prototype.setListenerid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveTradeMessageListenerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveTradeMessageListenerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RemoveTradeMessageListenerResponse.displayName = 'proto.RemoveTradeMessageListenerResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveTradeMessageListenerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveTradeMessageListenerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveTradeMessageListenerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemoveTradeMessageListenerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveTradeMessageListenerResponse}
 */
proto.RemoveTradeMessageListenerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveTradeMessageListenerResponse;
  return proto.RemoveTradeMessageListenerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveTradeMessageListenerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveTradeMessageListenerResponse}
 */
proto.RemoveTradeMessageListenerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveTradeMessageListenerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemoveTradeMessageListenerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemoveTradeMessageListenerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemoveTradeMessageListenerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResolveSymbolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ResolveSymbolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ResolveSymbolRequest.displayName = 'proto.ResolveSymbolRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ResolveSymbolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ResolveSymbolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResolveSymbolRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResolveSymbolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResolveSymbolRequest}
 */
proto.ResolveSymbolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ResolveSymbolRequest;
  return proto.ResolveSymbolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResolveSymbolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResolveSymbolRequest}
 */
proto.ResolveSymbolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResolveSymbolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ResolveSymbolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ResolveSymbolRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResolveSymbolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.ResolveSymbolRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ResolveSymbolRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.ResolveSymbolRequest.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ResolveSymbolRequest.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResolveSymbolResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ResolveSymbolResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ResolveSymbolResponse.displayName = 'proto.ResolveSymbolResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ResolveSymbolResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ResolveSymbolResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResolveSymbolResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResolveSymbolResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrument: (f = msg.getInstrument()) && rpc_trade_types_pb.Instrument.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResolveSymbolResponse}
 */
proto.ResolveSymbolResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ResolveSymbolResponse;
  return proto.ResolveSymbolResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResolveSymbolResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResolveSymbolResponse}
 */
proto.ResolveSymbolResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_trade_types_pb.Instrument;
      reader.readMessage(value,rpc_trade_types_pb.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResolveSymbolResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ResolveSymbolResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ResolveSymbolResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResolveSymbolResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_trade_types_pb.Instrument.serializeBinaryToWriter
    );
  }
};


/**
 * optional Instrument instrument = 1;
 * @return {?proto.Instrument}
 */
proto.ResolveSymbolResponse.prototype.getInstrument = function() {
  return /** @type{?proto.Instrument} */ (
    jspb.Message.getWrapperField(this, rpc_trade_types_pb.Instrument, 1));
};


/** @param {?proto.Instrument|undefined} value */
proto.ResolveSymbolResponse.prototype.setInstrument = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ResolveSymbolResponse.prototype.clearInstrument = function() {
  this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ResolveSymbolResponse.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FindRootOrderIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FindRootOrderIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FindRootOrderIdRequest.displayName = 'proto.FindRootOrderIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FindRootOrderIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FindRootOrderIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FindRootOrderIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FindRootOrderIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orderid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FindRootOrderIdRequest}
 */
proto.FindRootOrderIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FindRootOrderIdRequest;
  return proto.FindRootOrderIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FindRootOrderIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FindRootOrderIdRequest}
 */
proto.FindRootOrderIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FindRootOrderIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FindRootOrderIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FindRootOrderIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FindRootOrderIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.FindRootOrderIdRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FindRootOrderIdRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string orderId = 2;
 * @return {string}
 */
proto.FindRootOrderIdRequest.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.FindRootOrderIdRequest.prototype.setOrderid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FindRootOrderIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FindRootOrderIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FindRootOrderIdResponse.displayName = 'proto.FindRootOrderIdResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FindRootOrderIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.FindRootOrderIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FindRootOrderIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FindRootOrderIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootorderid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FindRootOrderIdResponse}
 */
proto.FindRootOrderIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FindRootOrderIdResponse;
  return proto.FindRootOrderIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FindRootOrderIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FindRootOrderIdResponse}
 */
proto.FindRootOrderIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootorderid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FindRootOrderIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FindRootOrderIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FindRootOrderIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FindRootOrderIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootorderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string rootOrderId = 1;
 * @return {string}
 */
proto.FindRootOrderIdResponse.prototype.getRootorderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FindRootOrderIdResponse.prototype.setRootorderid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetPositionAsOfRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetPositionAsOfRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetPositionAsOfRequest.displayName = 'proto.GetPositionAsOfRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetPositionAsOfRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetPositionAsOfRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetPositionAsOfRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetPositionAsOfRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    instrument: (f = msg.getInstrument()) && rpc_trade_types_pb.Instrument.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetPositionAsOfRequest}
 */
proto.GetPositionAsOfRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetPositionAsOfRequest;
  return proto.GetPositionAsOfRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetPositionAsOfRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetPositionAsOfRequest}
 */
proto.GetPositionAsOfRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = new rpc_trade_types_pb.Instrument;
      reader.readMessage(value,rpc_trade_types_pb.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetPositionAsOfRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetPositionAsOfRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetPositionAsOfRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetPositionAsOfRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_trade_types_pb.Instrument.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.GetPositionAsOfRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetPositionAsOfRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Instrument instrument = 2;
 * @return {?proto.Instrument}
 */
proto.GetPositionAsOfRequest.prototype.getInstrument = function() {
  return /** @type{?proto.Instrument} */ (
    jspb.Message.getWrapperField(this, rpc_trade_types_pb.Instrument, 2));
};


/** @param {?proto.Instrument|undefined} value */
proto.GetPositionAsOfRequest.prototype.setInstrument = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GetPositionAsOfRequest.prototype.clearInstrument = function() {
  this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetPositionAsOfRequest.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.GetPositionAsOfRequest.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.GetPositionAsOfRequest.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GetPositionAsOfRequest.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetPositionAsOfRequest.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetPositionAsOfResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetPositionAsOfResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetPositionAsOfResponse.displayName = 'proto.GetPositionAsOfResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetPositionAsOfResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetPositionAsOfResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetPositionAsOfResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetPositionAsOfResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && rpc_base_pb.Qty.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetPositionAsOfResponse}
 */
proto.GetPositionAsOfResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetPositionAsOfResponse;
  return proto.GetPositionAsOfResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetPositionAsOfResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetPositionAsOfResponse}
 */
proto.GetPositionAsOfResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_base_pb.Qty;
      reader.readMessage(value,rpc_base_pb.Qty.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetPositionAsOfResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetPositionAsOfResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetPositionAsOfResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetPositionAsOfResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_base_pb.Qty.serializeBinaryToWriter
    );
  }
};


/**
 * optional Qty position = 1;
 * @return {?proto.Qty}
 */
proto.GetPositionAsOfResponse.prototype.getPosition = function() {
  return /** @type{?proto.Qty} */ (
    jspb.Message.getWrapperField(this, rpc_base_pb.Qty, 1));
};


/** @param {?proto.Qty|undefined} value */
proto.GetPositionAsOfResponse.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetPositionAsOfResponse.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetPositionAsOfResponse.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetAllPositionsAsOfRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetAllPositionsAsOfRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetAllPositionsAsOfRequest.displayName = 'proto.GetAllPositionsAsOfRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetAllPositionsAsOfRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetAllPositionsAsOfRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetAllPositionsAsOfRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAllPositionsAsOfRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetAllPositionsAsOfRequest}
 */
proto.GetAllPositionsAsOfRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetAllPositionsAsOfRequest;
  return proto.GetAllPositionsAsOfRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetAllPositionsAsOfRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetAllPositionsAsOfRequest}
 */
proto.GetAllPositionsAsOfRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetAllPositionsAsOfRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetAllPositionsAsOfRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetAllPositionsAsOfRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAllPositionsAsOfRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.GetAllPositionsAsOfRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetAllPositionsAsOfRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.GetAllPositionsAsOfRequest.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.GetAllPositionsAsOfRequest.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GetAllPositionsAsOfRequest.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetAllPositionsAsOfRequest.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetAllPositionsAsOfResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetAllPositionsAsOfResponse.repeatedFields_, null);
};
goog.inherits(proto.GetAllPositionsAsOfResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetAllPositionsAsOfResponse.displayName = 'proto.GetAllPositionsAsOfResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetAllPositionsAsOfResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetAllPositionsAsOfResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetAllPositionsAsOfResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetAllPositionsAsOfResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAllPositionsAsOfResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionList: jspb.Message.toObjectList(msg.getPositionList(),
    rpc_trade_types_pb.Position.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetAllPositionsAsOfResponse}
 */
proto.GetAllPositionsAsOfResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetAllPositionsAsOfResponse;
  return proto.GetAllPositionsAsOfResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetAllPositionsAsOfResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetAllPositionsAsOfResponse}
 */
proto.GetAllPositionsAsOfResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_trade_types_pb.Position;
      reader.readMessage(value,rpc_trade_types_pb.Position.deserializeBinaryFromReader);
      msg.addPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetAllPositionsAsOfResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetAllPositionsAsOfResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetAllPositionsAsOfResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAllPositionsAsOfResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      rpc_trade_types_pb.Position.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Position position = 1;
 * @return {!Array<!proto.Position>}
 */
proto.GetAllPositionsAsOfResponse.prototype.getPositionList = function() {
  return /** @type{!Array<!proto.Position>} */ (
    jspb.Message.getRepeatedWrapperField(this, rpc_trade_types_pb.Position, 1));
};


/** @param {!Array<!proto.Position>} value */
proto.GetAllPositionsAsOfResponse.prototype.setPositionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Position}
 */
proto.GetAllPositionsAsOfResponse.prototype.addPosition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Position, opt_index);
};


proto.GetAllPositionsAsOfResponse.prototype.clearPositionList = function() {
  this.setPositionList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetAllPositionsByRootAsOfRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetAllPositionsByRootAsOfRequest.repeatedFields_, null);
};
goog.inherits(proto.GetAllPositionsByRootAsOfRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetAllPositionsByRootAsOfRequest.displayName = 'proto.GetAllPositionsByRootAsOfRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetAllPositionsByRootAsOfRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetAllPositionsByRootAsOfRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetAllPositionsByRootAsOfRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetAllPositionsByRootAsOfRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAllPositionsByRootAsOfRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    rootList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetAllPositionsByRootAsOfRequest}
 */
proto.GetAllPositionsByRootAsOfRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetAllPositionsByRootAsOfRequest;
  return proto.GetAllPositionsByRootAsOfRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetAllPositionsByRootAsOfRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetAllPositionsByRootAsOfRequest}
 */
proto.GetAllPositionsByRootAsOfRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetAllPositionsByRootAsOfRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetAllPositionsByRootAsOfRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetAllPositionsByRootAsOfRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAllPositionsByRootAsOfRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRootList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.GetAllPositionsByRootAsOfRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetAllPositionsByRootAsOfRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.GetAllPositionsByRootAsOfRequest.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.GetAllPositionsByRootAsOfRequest.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GetAllPositionsByRootAsOfRequest.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetAllPositionsByRootAsOfRequest.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string root = 3;
 * @return {!Array<string>}
 */
proto.GetAllPositionsByRootAsOfRequest.prototype.getRootList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.GetAllPositionsByRootAsOfRequest.prototype.setRootList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.GetAllPositionsByRootAsOfRequest.prototype.addRoot = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.GetAllPositionsByRootAsOfRequest.prototype.clearRootList = function() {
  this.setRootList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetAllPositionsByRootAsOfResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetAllPositionsByRootAsOfResponse.repeatedFields_, null);
};
goog.inherits(proto.GetAllPositionsByRootAsOfResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetAllPositionsByRootAsOfResponse.displayName = 'proto.GetAllPositionsByRootAsOfResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetAllPositionsByRootAsOfResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetAllPositionsByRootAsOfResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetAllPositionsByRootAsOfResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetAllPositionsByRootAsOfResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAllPositionsByRootAsOfResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionList: jspb.Message.toObjectList(msg.getPositionList(),
    rpc_trade_types_pb.Position.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetAllPositionsByRootAsOfResponse}
 */
proto.GetAllPositionsByRootAsOfResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetAllPositionsByRootAsOfResponse;
  return proto.GetAllPositionsByRootAsOfResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetAllPositionsByRootAsOfResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetAllPositionsByRootAsOfResponse}
 */
proto.GetAllPositionsByRootAsOfResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_trade_types_pb.Position;
      reader.readMessage(value,rpc_trade_types_pb.Position.deserializeBinaryFromReader);
      msg.addPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetAllPositionsByRootAsOfResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetAllPositionsByRootAsOfResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetAllPositionsByRootAsOfResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAllPositionsByRootAsOfResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      rpc_trade_types_pb.Position.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Position position = 1;
 * @return {!Array<!proto.Position>}
 */
proto.GetAllPositionsByRootAsOfResponse.prototype.getPositionList = function() {
  return /** @type{!Array<!proto.Position>} */ (
    jspb.Message.getRepeatedWrapperField(this, rpc_trade_types_pb.Position, 1));
};


/** @param {!Array<!proto.Position>} value */
proto.GetAllPositionsByRootAsOfResponse.prototype.setPositionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Position}
 */
proto.GetAllPositionsByRootAsOfResponse.prototype.addPosition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Position, opt_index);
};


proto.GetAllPositionsByRootAsOfResponse.prototype.clearPositionList = function() {
  this.setPositionList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AddReportRequest.displayName = 'proto.AddReportRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AddReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    brokerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hierarchy: jspb.Message.getFieldWithDefault(msg, 3, 0),
    message: (f = msg.getMessage()) && rpc_trade_types_pb.FixMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddReportRequest}
 */
proto.AddReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddReportRequest;
  return proto.AddReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddReportRequest}
 */
proto.AddReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrokerid(value);
      break;
    case 3:
      var value = /** @type {!proto.Hierarchy} */ (reader.readEnum());
      msg.setHierarchy(value);
      break;
    case 4:
      var value = new rpc_trade_types_pb.FixMessage;
      reader.readMessage(value,rpc_trade_types_pb.FixMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBrokerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHierarchy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      rpc_trade_types_pb.FixMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.AddReportRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AddReportRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string brokerId = 2;
 * @return {string}
 */
proto.AddReportRequest.prototype.getBrokerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AddReportRequest.prototype.setBrokerid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Hierarchy hierarchy = 3;
 * @return {!proto.Hierarchy}
 */
proto.AddReportRequest.prototype.getHierarchy = function() {
  return /** @type {!proto.Hierarchy} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.Hierarchy} value */
proto.AddReportRequest.prototype.setHierarchy = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional FixMessage message = 4;
 * @return {?proto.FixMessage}
 */
proto.AddReportRequest.prototype.getMessage = function() {
  return /** @type{?proto.FixMessage} */ (
    jspb.Message.getWrapperField(this, rpc_trade_types_pb.FixMessage, 4));
};


/** @param {?proto.FixMessage|undefined} value */
proto.AddReportRequest.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.AddReportRequest.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AddReportRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddReportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddReportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AddReportResponse.displayName = 'proto.AddReportResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddReportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AddReportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddReportResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddReportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddReportResponse}
 */
proto.AddReportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddReportResponse;
  return proto.AddReportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddReportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddReportResponse}
 */
proto.AddReportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddReportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddReportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddReportResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddReportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeleteReportRequest.displayName = 'proto.DeleteReportRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reportid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteReportRequest}
 */
proto.DeleteReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteReportRequest;
  return proto.DeleteReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteReportRequest}
 */
proto.DeleteReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReportid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.DeleteReportRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DeleteReportRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reportId = 2;
 * @return {string}
 */
proto.DeleteReportRequest.prototype.getReportid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DeleteReportRequest.prototype.setReportid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteReportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteReportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeleteReportResponse.displayName = 'proto.DeleteReportResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteReportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteReportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteReportResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteReportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteReportResponse}
 */
proto.DeleteReportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteReportResponse;
  return proto.DeleteReportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteReportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteReportResponse}
 */
proto.DeleteReportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteReportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteReportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteReportResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteReportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReadAvailableFixInitiatorSessionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReadAvailableFixInitiatorSessionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ReadAvailableFixInitiatorSessionsRequest.displayName = 'proto.ReadAvailableFixInitiatorSessionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReadAvailableFixInitiatorSessionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ReadAvailableFixInitiatorSessionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReadAvailableFixInitiatorSessionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReadAvailableFixInitiatorSessionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReadAvailableFixInitiatorSessionsRequest}
 */
proto.ReadAvailableFixInitiatorSessionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReadAvailableFixInitiatorSessionsRequest;
  return proto.ReadAvailableFixInitiatorSessionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReadAvailableFixInitiatorSessionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReadAvailableFixInitiatorSessionsRequest}
 */
proto.ReadAvailableFixInitiatorSessionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReadAvailableFixInitiatorSessionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReadAvailableFixInitiatorSessionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReadAvailableFixInitiatorSessionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReadAvailableFixInitiatorSessionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.ReadAvailableFixInitiatorSessionsRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ReadAvailableFixInitiatorSessionsRequest.prototype.setSessionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReadAvailableFixInitiatorSessionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ReadAvailableFixInitiatorSessionsResponse.repeatedFields_, null);
};
goog.inherits(proto.ReadAvailableFixInitiatorSessionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ReadAvailableFixInitiatorSessionsResponse.displayName = 'proto.ReadAvailableFixInitiatorSessionsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ReadAvailableFixInitiatorSessionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReadAvailableFixInitiatorSessionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ReadAvailableFixInitiatorSessionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReadAvailableFixInitiatorSessionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReadAvailableFixInitiatorSessionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fixsessionList: jspb.Message.toObjectList(msg.getFixsessionList(),
    rpc_fix_admin_pb.ActiveFixSession.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReadAvailableFixInitiatorSessionsResponse}
 */
proto.ReadAvailableFixInitiatorSessionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReadAvailableFixInitiatorSessionsResponse;
  return proto.ReadAvailableFixInitiatorSessionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReadAvailableFixInitiatorSessionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReadAvailableFixInitiatorSessionsResponse}
 */
proto.ReadAvailableFixInitiatorSessionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_fix_admin_pb.ActiveFixSession;
      reader.readMessage(value,rpc_fix_admin_pb.ActiveFixSession.deserializeBinaryFromReader);
      msg.addFixsession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReadAvailableFixInitiatorSessionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReadAvailableFixInitiatorSessionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReadAvailableFixInitiatorSessionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReadAvailableFixInitiatorSessionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFixsessionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      rpc_fix_admin_pb.ActiveFixSession.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ActiveFixSession fixSession = 1;
 * @return {!Array<!proto.ActiveFixSession>}
 */
proto.ReadAvailableFixInitiatorSessionsResponse.prototype.getFixsessionList = function() {
  return /** @type{!Array<!proto.ActiveFixSession>} */ (
    jspb.Message.getRepeatedWrapperField(this, rpc_fix_admin_pb.ActiveFixSession, 1));
};


/** @param {!Array<!proto.ActiveFixSession>} value */
proto.ReadAvailableFixInitiatorSessionsResponse.prototype.setFixsessionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ActiveFixSession=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ActiveFixSession}
 */
proto.ReadAvailableFixInitiatorSessionsResponse.prototype.addFixsession = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ActiveFixSession, opt_index);
};


proto.ReadAvailableFixInitiatorSessionsResponse.prototype.clearFixsessionList = function() {
  this.setFixsessionList([]);
};


goog.object.extend(exports, proto);
